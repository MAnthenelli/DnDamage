[{"name":"app.R","content":"# Header ---- \r\n#\r\n# Script name: \r\n# Damage & Distributions\r\n# Goals:\r\n# think about smarter functions that don't recalculate everything every time.\r\n# make visualization to see a build across 20 levels \r\n# spells\r\n# fighting styles\r\n# feats\r\n# enemy defensive features\r\n# species traits\r\n# (sub)class specific things\r\n# add a mouse over pop up that explains buttons more explicitly\r\n\r\n#today \r\n# standardize UI\r\n# fix interactive key \r\n\r\n# Author: Max Anthenelli\r\n#\r\n# Date Created: 2025-02-09\r\n#  This code is free for anyone to use\r\n# Email: anthenem@gmail.com\r\n#\r\n# webr::install(\"CRAN_PKG\")\r\nlibrary(tidyverse)\r\nlibrary(magrittr)\r\nlibrary(rlang)\r\nlibrary(glue)\r\nlibrary(scales)\r\nlibrary(grid)\r\nlibrary(ggtext)\r\nlibrary(shiny)\r\nlibrary(ggthemes)\r\nlibrary(ggiraph)\r\nlibrary(shinyWidgets)\r\nlibrary(bslib)\r\nlibrary(ggrepel)\r\nlibrary(fftw)\r\nlibrary(shinylive)\r\nlibrary(httpuv)\r\n# library(curl)\r\n# capabilities('libcurl')\r\n\r\nsource('init.R')\r\n# ui ----\r\nui <- \r\n  fluidPage(\r\n    theme = bs_theme(#bootswatch = \"cyborg\",\r\n      # base_font = font_google(\"Roboto\")\r\n    ),\r\n    tags$head(\r\n      tags$style(HTML(\"\r\n      .title {\r\n        font-size: 48px;\r\n      }\r\n    \"))\r\n    ),\r\n    div(class = \"scale-wrapper\",\r\n        page_navbar(\r\n          nav_spacer(),\r\n          nav_item(\r\n            fluidRow(\r\n              column(width = 1, div(style = \"text-align: right;\",input_dark_mode(id = \"mode\"))),\r\n              column(width = 1, div(style = \"text-align: right;\",\r\n                tooltip(switchInput(\"show_advanced\", \"Advanced Layout:\", FALSE),\r\n                \"Not yet implemented\"))),\r\n            ) \r\n          ),\r\n          title = tags$span(\"Dungeons & Dragons Damage App (Alpha)\", class = \"title\")\r\n        ),\r\n        sidebarLayout(\r\n          sidebarPanel(\r\n            ## basic layout ----\r\n            conditionalPanel(\r\n              condition = \"input.show_advanced == false\",\r\n              tooltip(\r\n                radioGroupButtons(\r\n                  inputId = \"action_type\", \r\n                  # label = \"Action Type:\",\r\n                  justified = TRUE,\r\n                  choices = c(\"Attack Roll\", \"Saving Throw\")\r\n                ), \r\n                \"Action Type\"\r\n              ),\r\n              ### Attack Roll ----\r\n              conditionalPanel(\r\n                condition = \"input.action_type == 'Attack Roll'\",\r\n                materialSwitch(\r\n                  inputId = \"show_hit_chance_basic\",\r\n                  label = HTML(\"<span style='font-size: 30px;'>Hit Chance<\/span>\"),\r\n                  value = TRUE\r\n                ),\r\n                ##### Hit Chance ----\r\n                conditionalPanel(\r\n                  condition = \"input.show_hit_chance_basic == true\",\r\n                  div(class = \"indent\",\r\n                      h3(\"Enemy AC\"),\r\n                      ###### Enemy ----\r\n                      div(class = \"indent\",\r\n                          tooltip(sliderTextInput(\r\n                            inputId = \"enemy_AC\", \r\n                            label = NULL,\r\n                            choices = 5:25,\r\n                            selected = 14,\r\n                            grid = TRUE, \r\n                            hide_min_max = TRUE,\r\n                            force_edges = TRUE\r\n                          ),\"Armor Class\"),\r\n                      ),\r\n                      ###### PC ----\r\n                      h3(\"Player Character\"),\r\n                      div(class = \"indent\",\r\n                          tooltip(radioGroupButtons(\r\n                            inputId = \"roll_type_atk\", \r\n                            # label = \"Attack Roll Type:\",\r\n                            justified = TRUE,\r\n                            choices = c(\"Straight\", \"Advantage\", \"Disadvantage\", \"Elven Accuracy\")\r\n                          ),\"Attack Roll Type\"),\r\n                          tooltip(sliderTextInput(\r\n                            inputId = \"mod_test_atk\", \r\n                            label = NULL,\r\n                            choices = -10:15,\r\n                            selected = 5,\r\n                            grid = TRUE, \r\n                            hide_min_max = TRUE,\r\n                            force_edges = TRUE\r\n                          ), \"Attack Roll Modifier\"),\r\n                          materialSwitch(\r\n                            inputId = \"options_roll_test_atk\",\r\n                            label = \"Additional Options\"\r\n                          ),\r\n                          ###### Bonus Options ----\r\n                          conditionalPanel(\r\n                            condition = \"input.options_roll_test_atk == true\",\r\n                            uiOutput(\"dynamic_ui_bonus_atk\"),\r\n                            fluidRow(\r\n                              column(width = 6,\r\n                                     div(style = \"text-align: center;\",\r\n                                         actionButton(\"bonus_dice_atk\", \"Add Bonus Dice\"))\r\n                              ),\r\n                              column(width = 6, \r\n                                     div(style = \"text-align: center;\",\r\n                                         actionButton(\"clear_bonus_atk\", \"Clear Bonus Dice\"))\r\n                              )\r\n                            ),\r\n                            sliderTextInput(\r\n                              inputId = \"reroll_threshold_test_atk\", \r\n                              label = \"Reroll d20 Test Below:\",\r\n                              choices = 0:20,\r\n                              grid = TRUE, \r\n                              hide_min_max = TRUE,\r\n                              force_edges = TRUE\r\n                              # step = 1,\r\n                              # ticks = FALSE,\r\n                              # round = TRUE\r\n                            ),\r\n                            sliderInput(\r\n                              inputId = \"min_crit\", \r\n                              label = \"Critical Hit Range:\",\r\n                              min = 1, \r\n                              max = 20,\r\n                              value = 20,\r\n                              step = 1,\r\n                              ticks = FALSE,\r\n                              round = TRUE\r\n                            ),\r\n                          ), #end of bonus options \r\n                      ), # end of indent\r\n                  ), # end of indent\r\n                  # materialSwitch(\r\n                  #   inputId = \"show_dmg_atk\",\r\n                  #   label = HTML(\"<span style='font-size: 30px;'>Damage<\/span>\"),\r\n                  #   value = TRUE\r\n                  # ),\r\n                  # conditionalPanel(\r\n                  #   condition = \"input.show_dmg_atk == true\",\r\n                  #   div(class = \"indent\",),\r\n                  \r\n                ), # end of hit chance\r\n                #### Damage ----\r\n                materialSwitch(\r\n                  inputId = \"show_damage_basic_atk\",\r\n                  label = HTML(\"<span style='font-size: 30px;'>Damage<\/span>\"),\r\n                  value = TRUE\r\n                ),\r\n                conditionalPanel(\r\n                  condition = \"input.show_damage_basic_atk == true\",\r\n                  div(class = \"indent\",\r\n                      ###### Enemy ----\r\n                      h3(\"Enemy Mitigation\"),\r\n                      div(class = \"indent\",\r\n                          sliderTextInput(\r\n                            inputId = \"enemy_dmg_reduction_atk\", \r\n                            label = \"Flat Damage Reduction\",\r\n                            choices = 0:20,\r\n                            grid = TRUE, \r\n                            hide_min_max = TRUE,\r\n                            force_edges = TRUE\r\n                          ),\r\n                          tooltip(radioGroupButtons(\r\n                            inputId = \"enemy_dmg_resistance_atk\", \r\n                            # label = \"Enemy Damage Resistance/Vulnerability:\",\r\n                            justified = TRUE,\r\n                            choices = c(\"Neither\", \"Resistant\", \"Vulnerable\")\r\n                          ), \"Enemy Damage Resistance/Vulnerability\"),\r\n                      ),\r\n                      ###### PC ----\r\n                      h3(\"Player Character\"),\r\n                      div(class = \"indent\",\r\n                          tooltip(sliderTextInput(\r\n                            inputId = \"n_dice_dmg_atk\", \r\n                            label = NULL,#\"Number of Damage Dice:\",\r\n                            choices = 1:20,\r\n                            hide_min_max = TRUE,\r\n                            grid = TRUE\r\n                          ), \"Number of Damage Dice\"),\r\n                          tooltip(radioGroupButtons(\r\n                            inputId = \"n_side_dmg_atk\", \r\n                            label = NULL, \r\n                            justified = TRUE,\r\n                            # grid = FALSE,\r\n                            # force_edges = FALSE,\r\n                            choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n                          ), \"Type of Damage Dice\"),\r\n                          tooltip(sliderTextInput(\r\n                            inputId = \"mod_dmg_atk\", \r\n                            label = NULL,#\"Number of Damage Dice:\",\r\n                            choices =-5:20,\r\n                            selected = 0,\r\n                            hide_min_max = TRUE,\r\n                            grid = TRUE\r\n                          ), \"Damage Modifier on Hit\"),\r\n                          materialSwitch(\r\n                            inputId = \"options_dmg_atk\",\r\n                            label = \"Additional Options\"\r\n                          ),\r\n                          ###### Bonus Options ----\r\n                          conditionalPanel(\r\n                            condition = \"input.options_dmg_atk == true\",\r\n                            tooltip(sliderTextInput(\r\n                              inputId = \"dmg_on_miss\", \r\n                              label = NULL,#\"Number of Damage Dice:\",\r\n                              choices = 0:20,\r\n                              hide_min_max = TRUE,\r\n                              grid = TRUE\r\n                            ), \"Damage on Miss\"),\r\n                            checkboxInput(\"savage_attacker\", \"Savage Attacker:\", FALSE),\r\n                            sliderTextInput(\r\n                              inputId = \"reroll_threshold_dmg_atk\", \r\n                              label = \"Reroll Damage Dice Below:\",\r\n                              choices = 0:4,\r\n                              hide_min_max = TRUE,\r\n                              grid = TRUE\r\n                            ),\r\n                            sliderTextInput(\r\n                              inputId = \"min_roll_dmg_atk\", \r\n                              label = \"Minimum Damage Die Roll:\",\r\n                              choices = 0:4,\r\n                              hide_min_max = TRUE,\r\n                              grid = TRUE\r\n                            ),\r\n                            uiOutput(\"dynamic_ui_atk\"),\r\n                            fluidRow(\r\n                              column(width = 6,\r\n                                     div(style = \"text-align: center;\",\r\n                                         actionButton(\"damage_rider_atk\", \"Add Damage Rider\"))\r\n                              ),\r\n                              column(width = 6, \r\n                                     div(style = \"text-align: center;\",\r\n                                         actionButton(\"clear_riders_atk\", \"Clear Damage Riders\"))\r\n                              )\r\n                            )\r\n                          ), # end of bonus options   \r\n                      ), # end of indent\r\n                  ), # end of indent\r\n                ), # end of damage\r\n              ), # end of attack roll\r\n              ### Saving Throw ----\r\n              conditionalPanel(\r\n                condition = \"input.action_type == 'Saving Throw'\",\r\n                materialSwitch(\r\n                  inputId = \"show_save_chance_basic\",\r\n                  label = HTML(\"<span style='font-size: 30px;'>Chance to Save<\/span>\"),\r\n                  value = TRUE\r\n                ),\r\n                #### Chance to Save ----\r\n                div(class = \"indent\",\r\n                    conditionalPanel(\r\n                      condition = \"input.show_save_chance_basic == true\",\r\n                      ##### Enemy ----\r\n                      h3(\"Enemy Saving Throw\"),\r\n                      tooltip(radioGroupButtons(\r\n                        inputId = \"roll_type_save\", \r\n                        # label = \"Saving Throw Roll Type:\",\r\n                        justified = TRUE,\r\n                        choices = c(\"Straight\", \"Advantage\", \"Disadvantage\")\r\n                      ),\"Saving Throw Roll Type\"),\r\n                      tooltip(sliderTextInput(\r\n                        inputId = \"mod_test_save\", \r\n                        label = NULL,\r\n                        choices = -5:5,\r\n                        selected = 0,\r\n                        grid = TRUE, \r\n                        hide_min_max = TRUE,\r\n                        force_edges = TRUE\r\n                      ),\"Relevant Modifier\"),\r\n                      ##### PC ----\r\n                      h3(\"Player Difficulty Class\"),\r\n                      tooltip(sliderTextInput(\r\n                        inputId = \"spell_dc\", \r\n                        label = NULL,\r\n                        choices = 8:25,\r\n                        selected = 13,\r\n                        grid = TRUE, \r\n                        hide_min_max = TRUE,\r\n                        force_edges = TRUE\r\n                      ),\"Spell Save Difficulty Class\"),\r\n                      ##### Bonus Options ----\r\n                      materialSwitch(\r\n                        inputId = \"options_test_roll_save\",\r\n                        label = \"Additional Options\"\r\n                      ),\r\n                      conditionalPanel(\r\n                        condition = \"input.options_test_roll_save == true\",\r\n                        uiOutput(\"dynamic_ui_bonus_save\"),\r\n                        fluidRow(\r\n                          column(width = 6,\r\n                                 div(style = \"text-align: center;\",\r\n                                     actionButton(\"bonus_dice_save\", \"Add Bonus Dice\"))\r\n                          ),\r\n                          column(width = 6, \r\n                                 div(style = \"text-align: center;\",\r\n                                     actionButton(\"clear_bonus_save\", \"Clear Bonus Dice\"))\r\n                          )\r\n                        ),\r\n                        sliderTextInput(\r\n                          inputId = \"reroll_threshold_test_save\", \r\n                          label = \"Reroll d20 Test Below:\",\r\n                          choices = 0:20,\r\n                          selected = 0,\r\n                          grid = TRUE, \r\n                          hide_min_max = TRUE,\r\n                          force_edges = TRUE\r\n                        ),\r\n                      ),# end of bonus options\r\n                    ), # end of chance to save\r\n                    #### Damage ----\r\n                    materialSwitch(\r\n                      inputId = \"show_damage_basic_save\",\r\n                      label = HTML(\"<span style='font-size: 30px;'>Damage<\/span>\"),\r\n                      value = TRUE\r\n                    ),\r\n                    tooltip(checkboxGroupButtons(\r\n                      inputId = \"conditions_dmg_save\",\r\n                      label = NULL,\r\n                      choices = c(\"Half Damage on Save\", \r\n                                  \"Evasion\"),\r\n                      justified = TRUE,\r\n                      checkIcon = list(\r\n                        yes = icon(\"ok\", \r\n                                   lib = \"glyphicon\"))\r\n                    ), \"Evasion means you take half damage on a failed DEX save and no damage on a successful one\"),\r\n                    conditionalPanel(\r\n                      condition = \"input.show_damage_basic_save == true\",\r\n                      div(class = \"indent\",\r\n                          ###### Enemy ----\r\n                          h3(\"Enemy Mitigation\"),\r\n                          div(class = \"indent\",\r\n                              tooltip(sliderTextInput(\r\n                                inputId = \"enemy_dmg_reduction_save\", \r\n                                label = NULL,\r\n                                choices = 0:20,\r\n                                selected = 0,\r\n                                grid = TRUE, \r\n                                hide_min_max = TRUE,\r\n                                force_edges = TRUE\r\n                              ),\"Flat Damage Reduction\"),\r\n                              tooltip(radioGroupButtons(\r\n                                inputId = \"enemy_dmg_resistance_save\", \r\n                                # label = \"Enemy Damage Resistance/Vulnerability:\",\r\n                                justified = TRUE,\r\n                                choices = c(\"Neither\", \"Resistant\", \"Vulnerable\")\r\n                              ), \"Enemy Damage Resistance/Vulnerability\"),\r\n                          ),\r\n                          ###### PC ----\r\n                          h3(\"Player Character\"),\r\n                          div(class = \"indent\",\r\n                              tooltip(sliderTextInput(\r\n                                inputId = \"n_dice_dmg_save\", \r\n                                label = NULL,#\"Number of Damage Dice:\",\r\n                                choices = 1:20,\r\n                                grid = TRUE\r\n                              ), \"Number of Damage Dice\"),\r\n                              tooltip(radioGroupButtons(\r\n                                inputId = \"n_side_dmg_save\", \r\n                                label = NULL, \r\n                                justified = TRUE,\r\n                                # grid = FALSE,\r\n                                # force_edges = FALSE,\r\n                                choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n                              ), \"Type of Damage Dice\"),\r\n                              tooltip(sliderTextInput(\r\n                                inputId = \"mod_dmg_save\", \r\n                                label = NULL,\r\n                                choices = -5:10,\r\n                                selected = 0,\r\n                                grid = TRUE, \r\n                                hide_min_max = TRUE,\r\n                                force_edges = TRUE\r\n                              ),\"Damage Modifier on Hit\"),\r\n                              materialSwitch(\r\n                                inputId = \"options_dmg_save\",\r\n                                label = \"Additional Options\"\r\n                              ),\r\n                              ##### Bonus Options ----\r\n                              conditionalPanel(\r\n                                condition = \"input.options_dmg_save == true\",\r\n                                sliderTextInput(\r\n                                  inputId = \"reroll_threshold_dmg_save\", \r\n                                  label = \"Reroll Damage Dice Below:\",\r\n                                  choices = 0:4,\r\n                                  selected = 0,\r\n                                  grid = TRUE, \r\n                                  hide_min_max = TRUE,\r\n                                  force_edges = TRUE\r\n                                ),\r\n                                sliderTextInput(\r\n                                  inputId = \"min_roll_dmg_save\", \r\n                                  label = \"Minimum Damage Die Roll:\",\r\n                                  choices = 0:4,\r\n                                  selected = 0,\r\n                                  grid = TRUE, \r\n                                  hide_min_max = TRUE,\r\n                                  force_edges = TRUE\r\n                                ),\r\n                                uiOutput(\"dynamic_ui_save\"),\r\n                                fluidRow(\r\n                                  column(width = 6,\r\n                                         div(style = \"text-align: center;\",\r\n                                             actionButton(\"damage_rider_save\", \"Add Damage Rider\"))\r\n                                  ),\r\n                                  column(width = 6, \r\n                                         div(style = \"text-align: center;\",\r\n                                             actionButton(\"clear_riders_save\", \"Clear Damage Riders\"))\r\n                                  )\r\n                                )\r\n                              ), # end of bonus options   \r\n                          ), # end of indent\r\n                      ), # end of indent\r\n                    ), # end of damage\r\n                ),# end of indent\r\n              ), # end of saving throw\r\n              tooltip(sliderTextInput(\r\n                inputId = \"n_actions_identical\", \r\n                label = NULL,\r\n                choices = 1:10,\r\n                grid = TRUE, \r\n                hide_min_max = TRUE,\r\n                force_edges = TRUE\r\n              ),\"Number of Identical Actions\"),\r\n            ),\r\n            ## Advanced Layout ----\r\n            conditionalPanel(\r\n              condition = \"input.show_advanced == true\",\r\n              sliderInput(\r\n                inputId = \"character_lvl\", \r\n                label = \"Character Level:\",\r\n                min = 1, \r\n                max = 20,\r\n                value = 5,\r\n                step = 1,\r\n                ticks = FALSE,\r\n                round = TRUE\r\n              ),\r\n              sliderInput(\r\n                inputId = \"mod_skill\", \r\n                label = HTML(\"Relevant Skill Modifier:<br><span style='font-size: 0.8em;'>(e.g. STR, CHR)<\/span>\"),\r\n                min = -1, \r\n                max = 7,\r\n                value = 0,\r\n                step = 1,\r\n                ticks = FALSE,\r\n                round = TRUE\r\n              ),\r\n              selectInput(\r\n                inputId = \"lvl_class\", \r\n                label = \"Class Level:\",\r\n                choices = NULL\r\n              ),\r\n              selectInput(\r\n                inputId = \"character_class\", \r\n                label = \"Character Class:\",\r\n                choices = class_caster_type %>% pull(class)\r\n              ),\r\n              virtualSelectInput(\r\n                inputId = \"weapon_name\", \r\n                label = \"Choose Weapon:\",\r\n                choices = weapons_2014 %>% pull(name),\r\n                search = TRUE,\r\n                width = \"100%\"\r\n              ),\r\n              virtualSelectInput(\r\n                inputId = \"spell\",\r\n                label = \"Spell:\",\r\n                choices = NULL,\r\n                search = TRUE,\r\n                width = \"100%\"\r\n              )\r\n            ),\r\n          ),\r\n          mainPanel(\r\n            div(style = \"text-align: right;\",\r\n              dropdownButton(\r\n                div(style = \"text-align: right;\",\r\n                h3(\"Show/Hide\"),\r\n                switchInput(\r\n                  inputId = \"show_pmf\",\r\n                  label = \"Damage Distributions\"\r\n                ),\r\n                switchInput(\r\n                  inputId = \"show_dpr\",\r\n                  label = \"DPR\"\r\n                ),\r\n                switchInput( #maybe only show this once there is another comparison....\r\n                  inputId = \"show_current\",\r\n                  label = \"Current Comparison\",\r\n                  value = TRUE\r\n                )),\r\n                icon = icon(\"gear\"),\r\n                width = 180\r\n              ),\r\n            ),\r\n            girafeOutput(\"plot\", width = \"100%\", height = \"1000px\"),\r\n            fluidRow(\r\n              column( \r\n                div(style = \"text-align: center;\",\r\n                    tooltip(  \r\n                      actionButton(\"add_pmf\", \"Add\"),\r\n                      \"Combine Snapshot of Current Action\",\r\n                      id = \"add_tip\"\r\n                    )\r\n                ), width = 4\r\n              ),\r\n              column(\r\n                div(style = \"text-align: center;\",\r\n                    popover(  \r\n                      actionButton(\"save_comparison\", \"Compare\"),\r\n                      title = \"Save for Comparison\",\r\n                      id = \"save_comparison_popover\",\r\n                      textInput(\"save_comparison_name\", \"Enter Comparison Name\"),\r\n                      actionButton(\"done\", \"Done\")\r\n                    )\r\n                ), width = 4\r\n              ),\r\n              column(\r\n                div(style = \"text-align: center;\",\r\n                    actionButton(\"clear_comparison\", \"Clear\")\r\n                ), width = 4\r\n              )\r\n            ),\r\n            fluidRow(\r\n              column(width  = 3),\r\n              column( \r\n                div(style = \"text-align: left;\",\r\n                    tooltip(  \r\n                      fileInput(\"file1\", NULL),\r\n                      verbatimTextOutput(\"file1_contents\"),\r\n                      \"Import CSV to add comparisons\",\r\n                      id = \"import_tip\"\r\n                    )\r\n                ), width = 3\r\n              ),\r\n              column( \r\n                div(style = \"text-align: center;\",\r\n                    tooltip(  \r\n                      downloadButton(\"downloadData\", \"Download Data\"),\r\n                      \"Download CSV of the data in the graph\",\r\n                      id = \"dl_tip\"\r\n                    )\r\n                ), width = 4\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  )\r\n# . ----\r\nserver <- function(input, output, session) {\r\n  source('server_functions.R')\r\n  # Reactive values to store the comparison data\r\n  ## Initialize reactives -----\r\n  n_saves <- 20\r\n  comparison_data <- reactiveValues(\r\n    !!!setNames(map(1:n_saves, ~ NULL), paste0(\"data\", 1:n_saves))\r\n  )\r\n  \r\n  current_comparison <- reactiveVal(1)\r\n  additional_pmf <- reactiveVal(NULL)\r\n  \r\n  counter_atk <- reactiveVal(0)\r\n  ui_elements_atk <- reactiveVal(list())\r\n  \r\n  counter_save <- reactiveVal(0)\r\n  ui_elements_save <- reactiveVal(list())\r\n  \r\n  counter_bonus_atk <- reactiveVal(0)\r\n  ui_elements_bonus_atk <- reactiveVal(list())\r\n  \r\n  counter_bonus_save <- reactiveVal(0)\r\n  ui_elements_bonus_save <- reactiveVal(list())\r\n  \r\n  ## dynamic ui ----\r\n  observeEvent(input$damage_rider_atk, {\r\n    counter_atk(counter_atk() + 1)\r\n    \r\n    new_ui_atk <- tagList(\r\n      tooltip(sliderTextInput(\r\n        inputId = paste0(\"n_dice_dmg_rider_atk_\", counter_atk()), \r\n        label = NULL,#\"Number of Damage Dice:\",\r\n        choices = 0:10,\r\n        hide_min_max = TRUE,\r\n        grid = TRUE\r\n      ), \"Number of Damage Dice\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"n_side_dmg_rider_atk_\", counter_atk()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n      ), \"Type of Damage Rider\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"sign_dmg_rider_atk_\", counter_atk()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"+\", \"-\")\r\n      ), \"Whether to add or subtract from roll\"),\r\n    )\r\n    \r\n    ui_elements_atk(c(ui_elements_atk(), list(new_ui_atk)))\r\n  })\r\n  \r\n  observeEvent(input$damage_rider_save, {\r\n    counter_save(counter_save() + 1)\r\n    \r\n    new_ui_save <- tagList(\r\n      tooltip(sliderTextInput(\r\n        inputId = paste0(\"n_dice_dmg_rider_save_\", counter_save()), \r\n        label = NULL,#\"Number of Damage Dice:\",\r\n        choices = 0:10,\r\n        hide_min_max = TRUE,\r\n        grid = TRUE\r\n      ), \"Number of Damage Dice\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"n_side_dmg_rider_save_\", counter_save()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n      ), \"Type of Damage Rider\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"sign_dmg_rider_save_\", counter_save()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"+\", \"-\")\r\n      ), \"Whether to add or subtract from roll\"),\r\n    )\r\n    \r\n    ui_elements_save(c(ui_elements_save(), list(new_ui_save)))\r\n  })\r\n  \r\n  observeEvent(input$bonus_dice_atk, {\r\n    counter_bonus_atk(counter_bonus_atk() + 1)\r\n    \r\n    new_ui_bonus_atk <- tagList(\r\n      tooltip(sliderTextInput(\r\n        inputId = paste0(\"n_dice_bonus_atk_\", counter_bonus_atk()), \r\n        label = NULL,#\"Number of Damage Dice:\",\r\n        hide_min_max = TRUE,\r\n        choices = 0:10,\r\n        grid = TRUE\r\n      ), \"Number of Bonus Dice (bardic, bane, etc.)\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"n_side_bonus_atk_\", counter_bonus_atk()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n      ), \"Type of Bonus Dice\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"bonus_operation_atk_\", counter_bonus_atk()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"+\", \"-\")\r\n      ), \"Whether to add or subtract from roll\"),\r\n    )\r\n    \r\n    ui_elements_bonus_atk(c(ui_elements_bonus_atk(), list(new_ui_bonus_atk)))\r\n  })\r\n  \r\n  observeEvent(input$bonus_dice_save, {\r\n    counter_bonus_save(counter_bonus_save() + 1)\r\n    \r\n    new_ui_bonus_save <- tagList(\r\n      tooltip(sliderTextInput(\r\n        inputId = paste0(\"n_dice_bonus_save_\", counter_bonus_save()), \r\n        label = NULL,#\"Number of Damage Dice:\",\r\n        hide_min_max = TRUE,\r\n        choices = 0:10,\r\n        grid = TRUE\r\n      ), \"Number of Bonus Dice (bardic, bane, etc.)\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"n_side_bonus_save_\", counter_bonus_save()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"d4\", \"d6\", \"d8\", \"d10\", \"d12\")\r\n      ), \"Type of Bonus Dice\"),\r\n      tooltip(radioGroupButtons(\r\n        inputId = paste0(\"bonus_operation_save_\", counter_bonus_save()), \r\n        label = NULL, \r\n        justified = TRUE,\r\n        # grid = FALSE,\r\n        # force_edges = FALSE,\r\n        choices = c(\"+\", \"-\")\r\n      ), \"Whether to add or subtract from roll\"),\r\n    )\r\n    \r\n    ui_elements_bonus_save(c(ui_elements_bonus_save(), list(new_ui_bonus_save)))\r\n  })\r\n  \r\n  \r\n  observeEvent(input$clear_riders_atk, {\r\n    ui_elements_atk(list()) \r\n    counter_atk(0)\r\n  })\r\n  \r\n  observeEvent(input$clear_riders_save, {\r\n    ui_elements_save(list()) \r\n    counter_save(0) \r\n  })\r\n  \r\n  observeEvent(input$clear_bonus_atk, {\r\n    ui_elements_bonus_atk(list()) \r\n    counter_bonus_atk(0) \r\n  })\r\n  \r\n  observeEvent(input$clear_bonus_save, {\r\n    ui_elements_bonus_save(list()) \r\n    counter_bonus_save(0) \r\n  })\r\n  \r\n  output$dynamic_ui_atk <- renderUI({\r\n    do.call(tagList, ui_elements_atk())\r\n  })\r\n  \r\n  output$dynamic_ui_save <- renderUI({\r\n    do.call(tagList, ui_elements_save())\r\n  })\r\n  \r\n  \r\n  output$dynamic_ui_bonus_atk <- renderUI({\r\n    do.call(tagList, ui_elements_bonus_atk())\r\n  })\r\n  \r\n  output$dynamic_ui_bonus_save <- renderUI({\r\n    do.call(tagList, ui_elements_bonus_save())\r\n  })\r\n  ## advanced layout ----\r\n  observeEvent(input$character_lvl, {\r\n    updateSelectInput(session, \"class_lvl\",\r\n                      choices = max_spell_level_df %>% select(starts_with(\r\n                        class_caster_type %>%\r\n                          filter(class == input$character_class) %>% \r\n                          pull(spell_caster_type)\r\n                      )) %>% pull() %>%\r\n                        {.[input$character_lvl]} %>% \r\n                        as.numeric()\r\n  )})\r\n  \r\n  observeEvent(list(input$character_class, input$character_lvl), {\r\n    updateVirtualSelect(\r\n      inputId = \"spell\",\r\n      choices = spells_2014 %>% \r\n        filter(pc_class %>% str_detect(input$character_class %>% str_to_lower())) %>% \r\n        filter(spell_level <= \r\n                 max_spell_level_df %>% \r\n                 select(starts_with(\r\n                   class_caster_type %>%\r\n                     filter(class == input$character_class) %>% \r\n                     pull(spell_caster_type)\r\n                 )) %>% pull() %>%\r\n                 {.[input$character_lvl]} %>% \r\n                 as.numeric()\r\n        ) %>%  \r\n        pull(spell_name)\r\n    )\r\n  })\r\n  \r\n  observeEvent(input$add_pmf,{\r\n    additional_pmf(get_pmf_reactive())\r\n  })\r\n  \r\n  # common_inputs ----\r\n  common_inputs <- reactive({\r\n    print(\"inside common_inputs\")\r\n    action_type <- input$action_type\r\n    get_input('roll_type', action_type) %>% print()\r\n    test_logic_df %>% \r\n      filter(roll_type == input[[get_input('roll_type', action_type)]]) %>% \r\n      print()\r\n    \r\n    list(\r\n      action_type = action_type,\r\n      # test\r\n      AC = input$enemy_AC,\r\n      DC = input$spell_dc,\r\n      \r\n      n_dice_test = test_logic_df %>% filter(roll_type == input[[get_input('roll_type', action_type)]]) %>% pull(n_dice_test),\r\n      operation = test_logic_df %>% filter(roll_type == input[[get_input('roll_type', action_type)]]) %>% pull(operation) %>% as_function(),\r\n      mod_test =  input[[get_input('mod_test', action_type)]],\r\n      reroll_threshold_test = input[[get_input('reroll_threshold_test', action_type)]],\r\n      min_crit = input$min_crit,\r\n      # dmg\r\n      n_dice_dmg = input[[get_input('n_dice_dmg', action_type)]],\r\n      n_side_dmg = input[[get_input('n_side_dmg', action_type)]] %>% str_extract(\"\\\\d+\") %>% parse_integer(),\r\n      mod_dmg = input[[get_input('mod_dmg', action_type)]],\r\n      reroll_threshold_dmg = input[[get_input('reroll_threshold_dmg', action_type)]],\r\n      min_roll_dmg = input[[get_input('min_roll_dmg', action_type)]],\r\n      dmg_on_miss = input$dmg_on_miss,\r\n      \r\n      half_dmg_on_save = input[[get_input('conditions_dmg', action_type)]] %>% str_detect(\"(?i)half\") %>% sum() == 1,\r\n      evasion = input[[get_input('conditions_dmg', action_type)]] %>% str_detect(\"(?i)evasion\") %>% sum() == 1,\r\n      n_actions_identical = input$'n_actions_identical',\r\n      enemy_dmg_reduction = as.integer(input[[get_input('enemy_dmg_reduction', action_type)]]),\r\n      resistance = input[[get_input('enemy_dmg_resistance', action_type)]],\r\n      counter_value = if (action_type == \"Attack Roll\") counter_atk() else counter_save(),\r\n      counter_bonus = if (action_type == \"Attack Roll\") counter_bonus_atk() else counter_bonus_save(),\r\n      savage_attacker = input$savage_attacker\r\n    )\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  ## get_pmf ----\r\n  # Main reactive function\r\n  get_pmf_reactive <- reactive({\r\n    pmfs <- get_helper_pmfs(common_inputs, input)\r\n    \r\n    if (common_inputs()$action_type == \"Attack Roll\") {\r\n      pmf <- get_attack_pmf(\r\n        AC = common_inputs()$AC,\r\n        n_dice_test = common_inputs()$n_dice_test,\r\n        operation = common_inputs()$operation,\r\n        bonus_pmf = pmfs$bonus_pmf,\r\n        mod_test = common_inputs()$mod_test,\r\n        reroll_threshold_test = common_inputs()$reroll_threshold_test,\r\n        on_fail = pmfs$on_fail,\r\n        on_success = pmfs$on_success,\r\n        on_crit = pmfs$on_crit,\r\n        mod_dmg = common_inputs()$mod_dmg,\r\n        min_crit = common_inputs()$min_crit,\r\n      )\r\n    } else {\r\n      pmf <- get_save_pmf(\r\n        DC = common_inputs()$DC,\r\n        n_dice_test = common_inputs()$n_dice_test,\r\n        operation = common_inputs()$operation,\r\n        mod_test = common_inputs()$mod_test,\r\n        reroll_threshold_test = common_inputs()$reroll_threshold_test,\r\n        bonus_pmf = pmfs$bonus_pmf,\r\n        on_crit = \r\n          if (\r\n            (common_inputs()$half_dmg_on_save == 1) &\r\n            (common_inputs()$evasion == 0)) {\r\n            pmfs$on_success %>% half_damage()\r\n          } else  {tibble(damage = 0, probability = 1)},\r\n        on_success = \r\n          if (\r\n            (common_inputs()$half_dmg_on_save == 1) &\r\n            (common_inputs()$evasion == 0)) {\r\n            pmfs$on_success %>% half_damage()\r\n          } else  {tibble(damage = 0, probability = 1)},\r\n        on_fail = \r\n          if (common_inputs()$evasion == 1) {\r\n            pmfs$on_success %>% half_damage()\r\n            } else {pmfs$on_success},\r\n        mod_dmg = common_inputs()$mod_dmg\r\n      )\r\n    }\r\n    \r\n    pmf <- pmf %>%\r\n      damage_rename() %>%\r\n      autoconvolve_pmf(common_inputs()$n_actions_identical) %>%\r\n      apply_enemy_dmg_mitigation(common_inputs()$resistance, common_inputs()$enemy_dmg_reduction)\r\n    \r\n    if (!is.null(additional_pmf())) {\r\n      pmf <- pmf %>%\r\n        convolve_pmf(additional_pmf(), name = \"damage\") %>%\r\n        damage_rename()\r\n    }\r\n    \r\n    return(pmf)\r\n  })\r\n  \r\n  ## format comparisons ----\r\n  observeEvent(input$done, {\r\n    current <- current_comparison()\r\n    comparison_name <- input$save_comparison_name\r\n    if (comparison_name %>% trim() == \"\") {\r\n      comparison_name <- paste0(\"comparison_\", current)\r\n    }\r\n    comparison_data[[paste0(\"data\", current)]] <- \r\n      get_pmf_reactive() %>% \r\n      mutate(comparison = comparison_name)\r\n    \r\n    current_comparison((current %% n_saves) + 1)\r\n    updateTextInput(session, \"save_comparison_name\", value = \"\")\r\n    additional_pmf(NULL) \r\n  })\r\n  \r\n  observeEvent(input$clear_comparison, {\r\n    additional_pmf(NULL)\r\n    walk(1:n_saves, ~ {\r\n      comparison_data[[paste0(\"data\", .x)]] <- NULL\r\n    })\r\n    current_comparison(1)\r\n  })\r\n  \r\n  observe({\r\n    toggle_popover(\"save_comparison_popover\")\r\n  })  %>% \r\n    bindEvent(input$done)\r\n  \r\n  theme_reactive <- reactive({\r\n    if (input$mode == \"dark\") {\r\n      theme_set(theme_fivethirtyeight() +\r\n                  theme(\r\n                    text = element_text(size = 14, face = \"plain\", color = \"lightgrey\"),\r\n                    rect = element_rect(fill = \"#1d1f21\"),\r\n                    plot.title = element_text(size = 16, face = \"plain\"),\r\n                    plot.margin = margin(t = 0, b = 1),\r\n                    axis.title.x = element_text(),\r\n                    panel.grid.major.x = element_blank(),\r\n                    panel.grid.minor.y = element_line(color = \"white\", linetype = \"dashed\"),\r\n                    legend.position = 'bottom',\r\n                    legend.margin = margin(t = -5, b = -2)\r\n                  ))\r\n    } else {\r\n      theme_set(theme_fivethirtyeight() +\r\n                  theme(\r\n                    text = element_text(size = 14, face = \"plain\"),\r\n                    rect = element_rect(fill = \"white\"),\r\n                    plot.title = element_text(size = 16, face = \"plain\"),\r\n                    plot.margin = margin(t = 0, b = 1),\r\n                    axis.title.x = element_text(),\r\n                    panel.grid.major.x = element_blank(),\r\n                    panel.grid.minor.y = element_line(color = \"lightgrey\", linetype = \"dashed\"),\r\n                    legend.position = 'bottom',\r\n                    legend.margin = margin(t = -5, b = -2)\r\n                  ))\r\n    }\r\n  })\r\n  ## graph ----\r\n  selected_keys <- reactive({\r\n    input$plot_key_selected\r\n  })\r\n  \r\n  output$plot <- renderGirafe({\r\n    theme_reactive()\r\n    current_data <- get_pmf_reactive() %>% mutate(comparison = \"current\")\r\n    selected <- selected_keys()\r\n    \r\n    pmf_data <- \r\n      {if (input$show_current | is_null(comparison_data$data1)){\r\n        list(\r\n          current_data,\r\n          map(1:n_saves, ~ comparison_data[[paste0(\"data\", .x)]])\r\n        )} else{\r\n        map(1:n_saves, ~ comparison_data[[paste0(\"data\", .x)]])\r\n        }} %>%\r\n      list_flatten %>%\r\n      compact() %>%\r\n      list_rbind()\r\n    \r\n    combined_data <- \r\n      pmf_data %>% \r\n      filter(probability != 0) %>% \r\n      group_by(comparison) %>% \r\n      mutate(cp = 1-cumsum(probability) %>% lag()) %>%\r\n      mutate(cp = ifelse(is.na(cp), 1, cp)) %>% \r\n      filter(damage > 0) %>%\r\n      ungroup()\r\n    \r\n    gg_point <- \r\n      combined_data %>% \r\n      ggplot(aes(y = cp, x = damage, group = factor(comparison), color = factor(comparison))) +\r\n      geom_line_interactive(\r\n        alpha = \r\n          case_when(\r\n            selected %>% length() == 0 ~ 1,\r\n            combined_data$comparison %in% selected ~ 1,\r\n            .default = .1\r\n          )\r\n      ) + \r\n      geom_point_interactive(\r\n        aes(\r\n          tooltip = glue(\"{cp * 100 %>% round(1)}% chance for at least {damage} damage\"),\r\n          hover_nearest = TRUE\r\n        ),\r\n        alpha = \r\n          case_when(\r\n            selected %>% length() == 0 ~ 1,\r\n            combined_data$comparison %in% selected ~ 1,\r\n            .default = .1\r\n          )\r\n      ) +\r\n      scale_y_continuous(label = label_percent(), breaks = seq(0, 1, .1)) +\r\n      scale_colour_manual_interactive(\r\n        data_id = combined_data$comparison %>% unique(),\r\n        values = tableau_20_colors[1:{combined_data$comparison %>% unique() %>% length()}]\r\n      ) +\r\n      ggtitle(\"Minimum Damage Probability\")\r\n      \r\n\r\n    vertical_lines <- combined_data %>%\r\n      group_by(comparison) %>%\r\n      summarize(expectation = take_expectation(across(everything())))\r\n    if (input$show_pmf){\r\n      gg_point <- gg_point +\r\n        geom_col_interactive(\r\n          data = pmf_data,\r\n          aes(x = damage, y = probability, group = factor(comparison), color = factor(comparison),\r\n              tooltip = glue(\"{probability * 100 %>% round(1)}% chance for exactly {damage} damage\"),\r\n              hover_nearest = TRUE),\r\n          alpha = \r\n            case_when(\r\n              selected %>% length() == 0 ~ 1,\r\n              pmf_data$comparison %in% selected ~ 1,\r\n              .default = .1\r\n            ),\r\n          width = length(unique(pmf_data$comparison)) * .05,\r\n          position = 'dodge'\r\n        )\r\n    }\r\n    if (input$show_dpr){\r\n    gg_point <- gg_point +\r\n      geom_segment_interactive(\r\n        data = vertical_lines,\r\n        aes(x = expectation, xend = expectation, y = 0, yend = 1, color = factor(comparison)),\r\n        alpha = \r\n          case_when(\r\n            selected %>% length() == 0 ~ 1,\r\n            vertical_lines$comparison %in% selected ~ 1,\r\n            .default = .1\r\n          )\r\n      ) +\r\n      geom_label_repel_interactive(\r\n        data = vertical_lines,\r\n        aes(x = expectation, y = 0, label = glue(\"{comparison}\\nDPR = {round(expectation, 1)}\")),\r\n        direction = \"y\",\r\n        segment.color = \"grey50\",\r\n        box.padding = 0.3,\r\n        point.padding = 0.5,\r\n        show.legend = FALSE,\r\n        alpha = \r\n          case_when(\r\n            selected %>% length() == 0 ~ 1,\r\n            vertical_lines$comparison %in% selected ~ 1,\r\n            .default = .1\r\n          )\r\n      )\r\n    }\r\n    girafe(ggobj = gg_point, width_svg = 10, height_svg = 7,\r\n           options = \r\n             list(\r\n               opts_selection_key(css = \"stroke:black;r:5pt;\"),\r\n               opts_hover_key(css = \"stroke:black;r:5pt;cursor:pointer;\")\r\n             ))\r\n  })\r\n  \r\n  observeEvent(input$file1, {\r\n    file_data <- read.csv(input$file1$datapath) %>% \r\n      filter(comparison != \"current\")# Read the uploaded file\r\n    comparison_values <- unique(file_data$comparison) # Get unique values of the \"comparison\" variable\r\n    \r\n    # Set all comparison data to NULL\r\n    walk(1:n_saves, ~ {\r\n      comparison_data[[paste0(\"data\", .x)]] <- NULL\r\n    })\r\n    \r\n    # Replace comparison data with new imported data\r\n    comparison_data_new <- \r\n      comparison_values %>% \r\n      imap(\\(x, idx) {\r\n      comparison_data[[paste0(\"data\", idx)]] <<- \r\n        file_data %>% filter(comparison == x)\r\n    })\r\n    \r\n    current_comparison(1)\r\n  })\r\n  \r\n  output$downloadData <- downloadHandler(\r\n    filename = \"dndamage.csv\",\r\n    content = function(file) {\r\n      list(\r\n        get_pmf_reactive() %>% mutate(comparison = \"current\"),\r\n        map(1:n_saves, ~ comparison_data[[paste0(\"data\", .x)]])\r\n      ) %>%\r\n        list_flatten %>%\r\n        compact() %>%\r\n        list_rbind() %>% \r\n      write_csv(file)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"DnDamage.Rproj","content":"Version: 1.0\r\nProjectId: 53247787-ecce-4d9f-a75c-78ddff9af3f4\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"},{"name":"dice_functions_v3.R","content":"convolve_pmf_many <- function(..., operation, name) {\r\n  if (!is.function(operation)) stop(\"operation is not function\") \r\n  # print(\"inside convolve_pmf_many\")\r\n  # print(list(...))\r\n  result_col <- glue(\"{name}_result\")\r\n  # print(result_col)\r\n  list(...) %>% \r\n    reduce(\\(x, y) expand_grid(x, y, .name_repair = \"unique\")) %>%\r\n    mutate(\r\n      !!result_col := reduce(across(starts_with(name)), operation), \r\n      probability = reduce(across(starts_with(\"probability\")), `*`)) %>%\r\n    group_by(!!sym(result_col)) %>%\r\n    reframe(probability = sum(probability))\r\n}\r\n\r\nconvolve_pmf <- function(..., operation = `+`, name = \"dice\"){\r\n  # print(\"inside convolve_pmf\")\r\n  # print(reduce(1:2, operation))\r\n  reduce(\r\n    seq_along(list(...))[-1], \r\n    \\(x, y) {convolve_pmf_many(operation = operation, name = name, x, list(...)[[y]])},\r\n    .init = list(...)[[1]]) #%>% \r\n    # mutate(cp = cumsum(probability))\r\n}\r\n\r\nautoconvolve_pmf <- function(pmf, times, operation = `+`, name = \"damage\") {\r\n  # print(\"inside autoconvolve_pmf\")\r\n  quos <- replicate(times, quo(pmf), simplify = FALSE)\r\n  eval_tidy(quo(list(!!!quos))) %>% \r\n  reduce(\\(x, y) convolve_pmf(x, y, operation = operation, name = name)) %>% \r\n  damage_rename()\r\n}\r\n\r\nget_reroll_pmf <- \r\n  function(dice, reroll_threshold, reroll_limit, min_roll){\r\n    # print(\"inside get_reroll_pmf\")\r\n    \r\n    dice %>%\r\n      imap(\\(x, idx){\r\n        # print(\"inside map in reroll\")\r\n        if (idx > reroll_limit) return(\r\n          x %>% \r\n            mutate(die_result = ifelse(die_result > min_roll, die_result, min_roll)) %>%\r\n            group_by(die_result) %>% \r\n            reframe(probability_start = sum(probability_start)) %>% \r\n            rename(!!glue(\"dice_{idx}\") := \"die_result\", \r\n                   !!glue(\"probability_{idx}\") := \"probability_start\")\r\n        )\r\n        list(  \r\n          x %>%\r\n            filter(die_result <= reroll_threshold) %>%\r\n            expand_grid(x, .name_repair = \"universal\") %>%\r\n            mutate(probability = reduce(across(starts_with(\"probability\")), `*`)) %>% \r\n            group_by(die_result...3) %>% \r\n            reframe(probability = sum(probability)) %>% \r\n            rename(dice_final = die_result...3),\r\n          x %>%   \r\n            filter(die_result > reroll_threshold) %>% \r\n            rename(dice_final = die_result, probability = probability_start)\r\n        ) %>%\r\n          list_rbind() %>% \r\n          # print() %>% \r\n          mutate(dice_final = ifelse(dice_final > min_roll, dice_final, min_roll)) %>%\r\n          group_by(dice_final) %>% \r\n          reframe(probability = sum(probability)) %>% \r\n          rename(!!glue(\"dice_{idx}\") := \"dice_final\", \r\n                 !!glue(\"probability_{idx}\") := \"probability\") \r\n      }) %>% \r\n      suppressMessages()\r\n  }\r\n\r\nget_roll_pmf <- \r\n  function(\r\n    n_dice, \r\n    n_side, \r\n    operation = `+`, \r\n    reroll_threshold = 0, \r\n    reroll_limit = Inf, \r\n    min_roll = 0\r\n  ) {\r\n    print(\"inside get_roll_pmf\")\r\n    if (!is.function(operation)) stop(\"operation is not function\")\r\n    c(n_dice, n_side, reroll_limit, reroll_threshold, min_roll) %>%\r\n      walk(~ {\r\n        var_name <- deparse(substitute(.x))\r\n        if (is.na(.x)) stop(glue(\"{var_name} is NA\"))\r\n        if (is.null(.x)) stop(glue(\"{var_name} is NULL\"))\r\n      })\r\n    \r\n    dice <-\r\n      seq_len(n_dice) %>% \r\n      map(~tibble(\r\n        die_result = seq_len(n_side),\r\n        probability_start := 1/n_side)) %>% \r\n      get_reroll_pmf(reroll_threshold, reroll_limit, min_roll)\r\n    \r\n    reduce(\r\n      dice[-1], \r\n      \\(acc, d) convolve_pmf(acc, d, operation = operation),\r\n      .init = dice[[1]]\r\n    )\r\n}\r\n\r\nget_bonus_pmf <- \r\n  function(n_dice, n_side, sign, reroll_threshold = 0, min_roll = 0){\r\n    if(!is_character(sign)) stop(\"sign must be a character\")\r\n    get_roll_pmf(n_dice = n_dice, n_side = n_side, reroll_threshold = reroll_threshold, min_roll = min_roll) %>%\r\n      {if (sign == \"+\") {.} else mutate(., across(starts_with(\"dice\"), \\(x) -x)) }\r\n  }\r\n\r\nget_test_pmf <- \r\n  function(\r\n    DC,\r\n    n_dice = 1,\r\n    n_side = 20,\r\n    operation = pmax,\r\n    bonus_pmf = tibble(dice_result = 0, probability = 1),\r\n    reroll_threshold = 0,\r\n    reroll_limit = 1,\r\n    mod_test = 0,\r\n    min_crit = 20\r\n  ) {\r\n    print(\"inside get_test_pmf\")\r\n    d20_roll_pmf <- \r\n      get_roll_pmf(n_dice, n_side, operation, reroll_limit, reroll_threshold) %>%\r\n      rename_with(~ ifelse(.x == \"probability_1\", \"probability\", .x)) %>%\r\n      rename_with(~ ifelse(.x == \"dice_1\", \"dice_result\", .x)) \r\n    if (nrow(bonus_pmf) == 1) {\r\n      return(d20_roll_pmf %>% \r\n               mutate(test_result = case_when( \r\n                 dice_result == 1 ~ 0, \r\n                 dice_result >= min_crit ~ 2, \r\n                 dice_result >= DC - mod_test ~ 1, \r\n                 dice_result < DC - mod_test ~ 0 ) %>% \r\n                   factor(levels = 0:2, labels = c(\"fail\", \"success\", \"crit\"))) %>% \r\n               group_by(test_result) %>% \r\n               reframe(probability = sum(probability)))}\r\n    \r\n    d20_roll_pmf %>%\r\n      mutate(test_result = case_when(\r\n        dice_result == 1 ~ 0,\r\n        dice_result >= min_crit ~ 2,\r\n        .default = 1\r\n      )) %>%\r\n      expand_grid(bonus_pmf, .name_repair = \"unique\") %>% \r\n      mutate(test_sum = reduce(across(starts_with(\"dice\")), `+`),\r\n             final_test_result = case_when(\r\n               test_result == 0 ~ 0,\r\n               test_result == 2 ~ 2,\r\n               test_sum >= DC - mod_test ~ 1,\r\n               test_sum < DC - mod_test ~ 0) %>% \r\n               factor(levels = 0:2, labels = c(\"fail\", \"success\", \"crit\")),\r\n             probability = reduce(across(starts_with(\"probability\")), `*`)) %>% \r\n      group_by(final_test_result) %>%\r\n      reframe(probability = sum(probability))\r\n  }\r\n\r\nget_attack_pmf <- \r\n  function(\r\n    AC, \r\n    on_success,\r\n    on_crit,\r\n    on_fail = expr(tibble(\"damage\" = 0, \"probability\" = 1)),\r\n    n_dice_test = 1,\r\n    n_side_test = 20, \r\n    operation = pmax,\r\n    bonus_pmf = tibble(dice_result = 0, probability = 1),\r\n    reroll_threshold_test = 0, \r\n    reroll_limit_test = 1,\r\n    mod_test = 0,\r\n    mod_dmg = 0,\r\n    min_crit = 20\r\n  ){\r\n    print(\"inside get_attack_pmf\")\r\n    \r\n    c(operation) %>% \r\n      walk(\\(x){\r\n        if (!is.function(x)) stop(\"operation is not function\") \r\n      })\r\n    \r\n    # Directly check for NULL and NA values of arguments\r\n    list(\r\n      \"AC\" = AC, \r\n      \"n_dice_test\" = n_dice_test,\r\n      \"reroll_threshold_test\" = reroll_threshold_test, \r\n      \"mod_test\" = mod_test, \r\n      \"mod_dmg\" = mod_dmg, \r\n      \"min_crit\" = min_crit\r\n    ) %>% \r\n      walk2(names(.), \\(value, name) {\r\n        if (is.null(value)) stop(glue(\"{name} is NULL\"))\r\n        if (is.na(value)) stop(glue(\"{name} is NA\"))\r\n      })\r\n    \r\n    # Rest of the function code\r\n    print(paste(\"Inside get_attack_pmf - AC:\", AC))\r\n    print(paste(\"Inside get_attack_pmf - n_dice_test:\", n_dice_test))\r\n    print(paste(\"Inside get_attack_pmf - reroll_threshold_test:\", reroll_threshold_test))\r\n    print(paste(\"Inside get_attack_pmf - mod_test:\", mod_test))\r\n    print(paste(\"Inside get_attack_pmf - mod_dmg:\", mod_dmg))\r\n    print(paste(\"Inside get_attack_pmf - min_crit:\", min_crit))\r\n    \r\n    get_test_pmf(\r\n      DC = AC,\r\n      n_dice = n_dice_test,\r\n      n_side = n_side_test,\r\n      operation = operation,\r\n      bonus_pmf = bonus_pmf,\r\n      mod_test = mod_test,\r\n      reroll_threshold = reroll_threshold_test,\r\n      reroll_limit = reroll_limit_test,\r\n      min_crit = min_crit\r\n    ) %>%\r\n      pmap(~{\r\n        if (..1 == \"success\") {\r\n          eval_tidy(on_success) %>% damage_rename() %>% \r\n            mutate(probability = probability * ..2) %>% \r\n            mutate(damage = damage + mod_dmg)\r\n        } else if (..1 == \"crit\") {\r\n          eval_tidy(on_crit) %>% \r\n            damage_rename() %>% \r\n            mutate(probability = probability * ..2) %>% \r\n            mutate(damage = damage + mod_dmg)\r\n        } else {\r\n          eval_tidy(on_fail) %>% \r\n            damage_rename() %>% \r\n            mutate(probability = probability * ..2)\r\n        }\r\n      }) %>% \r\n      list_rbind() %>% \r\n      group_by(damage) %>% \r\n      reframe(probability = sum(probability)) #%>%\r\n      #mutate(cp = cumsum(probability))\r\n  }\r\n\r\nget_save_pmf <- \r\n  function(\r\n    DC,\r\n    n_dice_test = 1,\r\n    n_side_test = 20, \r\n    operation = pmax,\r\n    mod_test = 0,\r\n    reroll_threshold_test = 0, \r\n    reroll_limit_test = 1,\r\n    bonus_pmf = tibble(dice_result = 0, probability = 1),\r\n    on_success,\r\n    on_fail,\r\n    on_crit = on_success,\r\n    mod_dmg = 0,\r\n    min_crit = 20\r\n  ){\r\n    print(\"inside get_save_pmf\")\r\n    print(paste(\"Inside get_attack_pmf - DC:\", DC))\r\n    print(paste(\"Inside get_attack_pmf - n_dice_test:\", n_dice_test))\r\n    print(paste(\"Inside get_attack_pmf - reroll_threshold_test:\", reroll_threshold_test))\r\n    print(paste(\"Inside get_attack_pmf - mod_test:\", mod_test))\r\n    print(paste(\"Inside get_attack_pmf - mod_dmg:\", mod_dmg))\r\n    print(paste(\"Inside get_attack_pmf - min_crit:\", min_crit))\r\n    \r\n    get_test_pmf(\r\n      DC = DC,\r\n      n_dice = n_dice_test,\r\n      n_side = n_side_test,\r\n      operation = operation,\r\n      bonus_pmf = bonus_pmf,\r\n      mod_test = mod_test,\r\n      reroll_threshold = reroll_threshold_test,\r\n      reroll_limit = reroll_limit_test,\r\n      min_crit = min_crit\r\n    ) %>%\r\n      pmap(~{\r\n        if (..1 == \"success\") {\r\n          eval_tidy(on_success) %>% damage_rename() %>% \r\n            mutate(probability = probability * ..2)\r\n        } else if (..1 == \"crit\") {\r\n          eval_tidy(on_crit) %>% \r\n            damage_rename() %>% \r\n            mutate(probability = probability * ..2) \r\n        } else {\r\n          eval_tidy(on_fail) %>% \r\n            damage_rename() %>% \r\n            mutate(probability = probability * ..2) %>% \r\n            mutate(damage = damage + mod_dmg)\r\n        }\r\n      }) %>% \r\n      list_rbind() %>% \r\n      group_by(damage) %>% \r\n      reframe(probability = sum(probability)) #%>%\r\n    #mutate(cp = cumsum(probability))\r\n  }\r\n\r\ntake_expectation <- \r\n  function(tibble){\r\n    # print(\"inside take_expectation\")\r\n    tibble %>%\r\n      rename_with(~ ifelse(.x == \"dice_result\" | .x == \"dice_1\", \"damage\", .x)) %>%\r\n      rename_with(~ ifelse(.x == \"probability_1\", \"probability\", .x)) %>%\r\n      mutate(expect = damage * probability) %>% \r\n      pull(expect) %>% sum()\r\n  }\r\n\r\n\r\n\r\ndamage_rename <- function(tibble) {\r\n  tibble %>%\r\n    rename_with(~ ifelse(str_starts(.x, \"probability\"), \"probability\", .x)) %>%\r\n    rename_with(~ ifelse(str_starts(.x, \"dice\"), \"damage\", .x)) %>%\r\n    rename_with(~ ifelse(str_starts(.x, \"damage_result\"), \"damage\", .x))\r\n}\r\n\r\n\r\nhalf_damage <- \r\n  function(tibble) {\r\n    # print(\"inside half_damage\")\r\n    tibble %>% \r\n      damage_rename() %>% \r\n      mutate(damage = floor(damage/2)) %>% \r\n      group_by(damage) %>% \r\n      reframe(probability = sum(probability))\r\n  }\r\n\r\ndouble_damage <- \r\n  function(tibble) {\r\n    # print(\"inside half_damage\")\r\n    tibble %>% \r\n      damage_rename() %>% \r\n      mutate(damage = floor(damage * 2)) %>% \r\n      group_by(damage) %>% \r\n      reframe(probability = sum(probability))\r\n  }","type":"text"},{"name":"dice_functions_v4.R","content":"convolve_pmf_many <- function(..., operation, name) {\r\n  if (!is.function(operation)) stop(\"operation is not function\") \r\n  # print(\"inside convolve_pmf_many\")\r\n  # print(list(...))\r\n  result_col <- glue(\"{name}_result\")\r\n  # print(result_col)\r\n  list(...) %>% \r\n    reduce(\\(x, y) expand_grid(x, y, .name_repair = \"unique\")) %>%\r\n    mutate(\r\n      !!result_col := reduce(across(starts_with(name)), operation), \r\n      probability = reduce(across(starts_with(\"probability\")), `*`)) %>%\r\n    group_by(!!sym(result_col)) %>%\r\n    reframe(probability = sum(probability))\r\n}\r\n\r\nconvolve_pmf <- function(..., operation = `+`, name = \"dice\") {\r\n  print(\"inside convolve_pmf\")\r\n  if (identical(operation, `+`)) {\r\n    print(\"fft\")\r\n    processed_list <- list(...) %>% print() %>% \r\n      map(~{.x %>% damage_rename() %>% print() %>%  impute_zero_values(name = \"damage\")}) %>% print()\r\n    return(do.call(convolve_pmf_fft, c(processed_list, list(name = \"damage\"))))\r\n  }\r\n  print(\"standard approach\")\r\n  reduce(\r\n    seq_along(list(...))[-1], \r\n    \\(x, y) {convolve_pmf_many(operation = operation, name = name, x, list(...)[[y]])},\r\n    .init = list(...)[[1]]) \r\n}\r\n\r\nautoconvolve_pmf <- function(pmf, times, operation = `+`, name = \"damage\") {\r\n  print(\"inside autoconvolve_pmf\")\r\n  print(paste0(\"times = \", times))\r\n  quos <- replicate(times, quo(pmf), simplify = FALSE)\r\n  eval_tidy(quo(list(!!!quos))) %>% \r\n    reduce(\\(x, y) convolve_pmf(x, y, operation = operation, name = name)) %>% \r\n    damage_rename()\r\n}\r\n\r\nget_reroll_pmf <- \r\n  function(dice, reroll_threshold, reroll_limit, min_roll){\r\n    # print(\"inside get_reroll_pmf\")\r\n    \r\n    dice %>%\r\n      imap(\\(x, idx){\r\n        # print(\"inside map in reroll\")\r\n        if (idx > reroll_limit) return(\r\n          x %>% \r\n            mutate(die_result = ifelse(die_result > min_roll, die_result, min_roll)) %>%\r\n            group_by(die_result) %>% \r\n            reframe(probability_start = sum(probability_start)) %>% \r\n            rename(!!glue(\"dice_{idx}\") := \"die_result\", \r\n                   !!glue(\"probability_{idx}\") := \"probability_start\")\r\n        )\r\n        list(  \r\n          x %>%\r\n            filter(die_result <= reroll_threshold) %>%\r\n            expand_grid(x, .name_repair = \"universal\") %>%\r\n            mutate(probability = reduce(across(starts_with(\"probability\")), `*`)) %>% \r\n            group_by(die_result...3) %>% \r\n            reframe(probability = sum(probability)) %>% \r\n            rename(dice_final = die_result...3),\r\n          x %>%   \r\n            filter(die_result > reroll_threshold) %>% \r\n            rename(dice_final = die_result, probability = probability_start)\r\n        ) %>%\r\n          list_rbind() %>% \r\n          # print() %>% \r\n          mutate(dice_final = ifelse(dice_final > min_roll, dice_final, min_roll)) %>%\r\n          group_by(dice_final) %>% \r\n          reframe(probability = sum(probability)) %>% \r\n          rename(!!glue(\"dice_{idx}\") := \"dice_final\", \r\n                 !!glue(\"probability_{idx}\") := \"probability\") \r\n      }) %>% \r\n      suppressMessages()\r\n  }\r\n\r\nget_roll_pmf <- \r\n  function(\r\n    n_dice, \r\n    n_side, \r\n    operation = `+`, \r\n    reroll_threshold = 0, \r\n    reroll_limit = Inf, \r\n    min_roll = 0\r\n  ) {\r\n    print(\"inside get_roll_pmf\")\r\n    print(paste0(\"n_dice = \", n_dice, \"; n_side = \", n_side))\r\n    if (!is.function(operation)) stop(\"operation is not function\")\r\n    if(identical(operation, `+`) & reroll_threshold == 0 & min_roll == 0 ){\r\n      return(get_roll_pmf_fft(n_dice, n_side))\r\n    }\r\n    c(n_dice, n_side, reroll_limit, reroll_threshold, min_roll) %>%\r\n      walk(~ {\r\n        var_name <- deparse(substitute(.x))\r\n        if (is.na(.x)) stop(glue(\"{var_name} is NA\"))\r\n        if (is.null(.x)) stop(glue(\"{var_name} is NULL\"))\r\n      })\r\n    \r\n    dice <-\r\n      seq_len(n_dice) %>% \r\n      map(~tibble(\r\n        die_result = seq_len(n_side),\r\n        probability_start := 1/n_side)) %>% \r\n      get_reroll_pmf(reroll_threshold, reroll_limit, min_roll)\r\n    \r\n    reduce(\r\n      dice[-1], \r\n      \\(acc, d) convolve_pmf(acc, d, operation = operation),\r\n      .init = dice[[1]]\r\n    )\r\n  }\r\n\r\nget_bonus_pmf <- \r\n  function(n_dice, n_side, sign, reroll_threshold = 0, min_roll = 0){\r\n    if(!is_character(sign)) stop(\"sign must be a character\")\r\n    get_roll_pmf(n_dice = n_dice, n_side = n_side, reroll_threshold = reroll_threshold, min_roll = min_roll) %>%\r\n      {if (sign == \"+\") {.} else mutate(., across(starts_with(\"dice\"), \\(x) -x)) }\r\n  }","type":"text"},{"name":"dnd_functions.R","content":"# feats ----\r\napply_savage_attacker_when <- function(pmf, savage_attacker, action_type) { \r\n  print(\"inside_savage_attaker_when\")\r\n  # print(paste(\"apply_savage_attacker_when - action_type:\", action_type))\r\n  if (savage_attacker & action_type == \"Attack Roll\") {\r\n    print(\"Applying Savage Attacker\")\r\n    return(\r\n      autoconvolve_pmf(pmf, times = 2, operation = pmax, name = \"dice\") %>%\r\n        rename(\"dice_result\" = \"damage\")\r\n    )\r\n  } else { return(pmf) }\r\n}\r\n\r\n\r\napply_enemy_dmg_mitigation <- \r\n  function(pmf, resistance, dmg_reduction){\r\n    {if (resistance == \"Neither\") {\r\n      pmf\r\n    } else if (resistance == \"Resistant\") {\r\n      half_damage(pmf)\r\n    } else double_damage(pmf)} %>% \r\n      mutate(damage = ifelse(damage >= dmg_reduction, damage - dmg_reduction, 0)) %>%\r\n      group_by(damage) %>%\r\n      reframe(probability = sum(probability))\r\n  }\r\n\r\n","type":"text"},{"name":"fft_functions.R","content":"get_roll_pmf_fft <- function(M, N) {\r\n  print(\"inside get_roll_pmf_fft\")\r\n  print(paste0(\"M = \", M, \"; N = \", N))\r\n  sum_pmf <- \r\n    c(rep(1 / N, N), rep(0, (M - 1) * N)) %>% \r\n    FFT() %>% \r\n    `^`(M) %>% \r\n    IFFT() %>% \r\n    Re() %>% \r\n    {.[1:(M * (N - 1)+ 1)]} %>% \r\n    divide_by(sum(.)) %>% \r\n    round(10)\r\n  \r\n  tibble(dice_result = M:(M * N), probability = sum_pmf)\r\n}\r\n\r\nimpute_zero_values <- function(data, name = \"dice\") {\r\n  print(\"inside impute_zero_values\")\r\n  result_col <- glue(\"{name}\")\r\n  vals <- data %>% pull({{ result_col }})\r\n  min_value <- min(vals)\r\n  max_value <- max(vals)\r\n  \r\n  tibble(!!result_col := min_value:max_value) %>%\r\n    left_join(data, by = set_names(result_col, result_col)) %>%\r\n    mutate(probability = coalesce(probability, 0))\r\n}\r\n\r\nconvolve_pmf_fft <- function(..., name = \"dice\") {\r\n  print(\"inside convolve_pmf_fft\")\r\n  P_list <- list(...) %>% print()\r\n  prob_list <- P_list %>% map(\\(x) pull(x, probability)) \r\n  \r\n  N <- prob_list %>% \r\n    map_int(\\(x) length(x) - 1) %>%\r\n    sum() %>% \r\n    add(1)\r\n  \r\n  sum_pmf <-  \r\n    prob_list %>% \r\n    map(\\(x){\r\n     c(x, rep(0, N - length(x)))\r\n    }) %>% \r\n    map(FFT) %>% \r\n    reduce(`*`) %>%\r\n    IFFT() %>% \r\n    Re() %>% \r\n    {.[1:N]} %>% \r\n    divide_by(sum(.)) %>% \r\n    round(10)\r\n  \r\n  result_col <- glue(\"{name}_result\")\r\n  \r\n  dice_result_list <- P_list %>% map(\\(x) pull(x, starts_with(name)))\r\n  print(dice_result_list)\r\n  tibble(\r\n    dice_result = sum(map_dbl(dice_result_list, min)):sum(map_dbl(dice_result_list, max)),\r\n    probability = sum_pmf\r\n  )\r\n}","type":"text"},{"name":"init.R","content":"source('dice_functions_v3.R')\r\nsource('dice_functions_v4.R')\r\nsource('fft_functions.R')\r\nsource('dnd_functions.R')\r\nsource('server_functions.R')\r\n\r\ntableau_20_colors <- c(\"#1F77B4\", \"#AEC7E8\", \"#FF7F0E\", \"#FFBB78\", \"#2CA02C\", \"#98DF8A\", \r\n                       \"#D62728\", \"#FF9896\", \"#9467BD\", \"#C5B0D5\", \"#8C564B\", \"#C49C94\", \r\n                       \"#E377C2\", \"#F7B6D2\", \"#7F7F7F\", \"#C7C7C7\", \"#BCBD22\", \"#DBDB8D\", \r\n                       \"#17BECF\", \"#9EDAE5\")\r\n\r\nlevel_df <- \r\n  tibble(\r\n    level = 1:20,\r\n    proficiency = c(rep(2, 4), rep(3, 4), rep(4, 4), rep(5, 4), rep(6, 4)),\r\n    rage = c(rep(2, 8), rep(3, 7), rep(4, 5)),\r\n    n_actions_identical = c(rep(1, 4), rep(2, 6), rep(3, 6), rep(4, 4))\r\n  )\r\n\r\ntest_logic_df <- \r\n  tibble(\r\n    roll_type = c(\"Straight\", \"Advantage\", \"Disadvantage\", \"Elven Accuracy\"),\r\n    n_dice_test = c(1, 2, 2, 3),\r\n    operation = c(\"pmax\", \"pmax\", \"pmin\", \"pmax\")\r\n  )\r\n\r\nmax_spell_level_df <- \r\n  tibble(\r\n    none = rep(0, 20),\r\n    full_caster = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9),\r\n    half_caster = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5),\r\n    third_caster = c(NA, NA, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4),\r\n    character_level = 1:20\r\n  )\r\n\r\nclass_caster_type <- \r\n  tibble(\r\n    class = c(\"Barbarian\", \"Bard\", \"Cleric\", \"Druid\", \"Fighter\", \"Monk\", \"Paladin\", \"Ranger\", \"Rogue\", \"Sorcerer\", \"Warlock\", \"Wizard\"),\r\n    spell_caster_type = c(\"none\", \"full\", \"full\", \"full\", \"third\", \"none\", \"half\", \"half\", \"third\", \"full\", \"full\", \"full\")\r\n  )\r\n\r\nspells_2014 <- read_rds(\"spells_2014.rds\")\r\nweapons_2014 <- read_rds(\"weapons_2014.rds\")","type":"text"},{"name":"server_functions.R","content":"get_input <- function(base_name, action_type, index = NULL) {\r\n  if (!is.null(index) && str_detect(base_name, \"dmg_rider|dice_bonus|side_bonus|bonus_operation\")) {\r\n    if (action_type == \"Attack Roll\") {\r\n      glue(\"{base_name}_atk_{index}\")\r\n    } else {\r\n      glue(\"{base_name}_save_{index}\")\r\n    }\r\n  } else {\r\n    if (action_type == \"Attack Roll\") {\r\n      glue(\"{base_name}_atk\")\r\n    } else {\r\n      glue(\"{base_name}_save\")\r\n    }\r\n  }\r\n}\r\n\r\nget_dmg_dice_pmf <- function(is_crit = FALSE, n_dice, n_side, reroll_threshold, min_roll, savage_attacker = FALSE, counter_value, action_type, input) {\r\n  print(\"inside get_dmg_dice_pmf\")\r\n  print(paste(\"get_dmg_dice_pmf - action_type:\", action_type))  # Debug print\r\n  \r\n  pmf_list <- if (counter_value > 0) {\r\n    1:counter_value %>% map(~ {\r\n      dice_key <- get_input('n_dice_dmg_rider', action_type, .x)\r\n      side_key <- get_input('n_side_dmg_rider', action_type, .x)\r\n      sign_key <- get_input('sign_dmg_rider', action_type, .x)\r\n      \r\n      print(paste(\"Dice Key:\", dice_key))\r\n      print(paste(\"Side Key:\", side_key))\r\n      print(paste(\"Sign Key:\", sign_key))\r\n      \r\n      n_dice <- input[[dice_key]] %>% print()\r\n      n_side <- input[[side_key]] %>% str_extract(\"\\\\d+\") %>% as.integer() %>% print()\r\n      sign <- input[[sign_key]] %>% print()\r\n      \r\n      \r\n      if (n_dice > 0) {\r\n        get_bonus_pmf( (1 + is_crit) * n_dice, n_side, sign, reroll_threshold, min_roll)\r\n        } else tibble(dice_result = 0, probability = 1)\r\n    })\r\n  } else {\r\n    list(tibble(damage = 0, probability = 1))\r\n  }\r\n  \r\n  pmf_list %>%\r\n    c(\r\n      get_roll_pmf(n_dice = n_dice, n_side = n_side, reroll_threshold = reroll_threshold, min_roll = min_roll) %>% print() %>% \r\n        apply_savage_attacker_when(savage_attacker, action_type) %>% list()\r\n    ) %>% \r\n    reduce(convolve_pmf)\r\n}\r\n\r\nget_test_bonus_dice_pmf <- function(action_type, counter_bonus, input) {\r\n  print(\"inside get_test_bonus_dice_pmf\")\r\n  if (counter_bonus > 0) {\r\n    1:counter_bonus %>% \r\n      map(~{\r\n        print(\".x\")\r\n        print(.x)\r\n        dice_key <- get_input('n_dice_bonus', action_type, .x)\r\n        side_key <- get_input('n_side_bonus', action_type, .x)\r\n        sign_key <- get_input('bonus_operation', action_type, .x)\r\n        \r\n        print(paste(\"Dice Key:\", dice_key))  # Debug print\r\n        print(paste(\"Side Key:\", side_key))  # Debug print\r\n        print(paste(\"Operation Key:\", side_key))  # Debug print\r\n        \r\n        c(dice_key, side_key, sign_key) %>% \r\n        walk(~ {if (!.x %in% names(input)) {stop(glue(\"Key {.x} not found in input\"))}})\r\n        \r\n        n_dice <- input[[dice_key]] %>% print()\r\n        n_side <- input[[side_key]] %>% str_extract(\"\\\\d+\") %>% as.integer() %>% print()\r\n        sign <- input[[sign_key]] %>% print()\r\n      if (n_dice > 0) {get_bonus_pmf( n_dice, n_side, sign)} else tibble(dice_result = 0, probability = 1)\r\n      }) %>% \r\n      reduce(convolve_pmf)\r\n  } else {\r\n    tibble(dice_result = 0, probability = 1)\r\n  }\r\n}\r\n\r\nget_helper_pmfs <- function(common_inputs, input) {\r\n  print(\"inside get_helper_pmfs\")\r\n  common_inputs <- common_inputs()\r\n  print(common_inputs)\r\n  \r\n  print(\"helping getting on_fail\")\r\n  on_fail <- tibble(damage = common_inputs$dmg_on_miss, probability = 1)\r\n  \r\n  print(\"helper getting on_success\")\r\n  on_success <- get_dmg_dice_pmf(\r\n    n_dice = common_inputs$n_dice_dmg, \r\n    n_side = common_inputs$n_side_dmg,\r\n    reroll_threshold = common_inputs$reroll_threshold_dmg,\r\n    min_roll = common_inputs$min_roll_dmg, \r\n    savage_attacker = common_inputs$savage_attacker, \r\n    counter_value = common_inputs$counter_value,  \r\n    action_type = common_inputs$action_type,\r\n    input = input\r\n  )\r\n  print(\"helper getting on_crit\")\r\n  on_crit <- get_dmg_dice_pmf(\r\n    is_crit = TRUE,\r\n    n_dice = 2 * common_inputs$n_dice_dmg, \r\n    n_side = common_inputs$n_side_dmg,\r\n    reroll_threshold = common_inputs$reroll_threshold_dmg,\r\n    min_roll = common_inputs$min_roll_dmg, \r\n    savage_attacker = common_inputs$savage_attacker, \r\n    counter_value = common_inputs$counter_value,  \r\n    action_type = common_inputs$action_type,\r\n    input = input\r\n  )\r\n  print(\"helper getting bonus_pmf\")\r\n  bonus_pmf <- get_test_bonus_dice_pmf(\r\n    action_type = common_inputs$action_type, \r\n    counter_bonus = common_inputs$counter_bonus, \r\n    input = input\r\n  )\r\n  print(\"exiting helper\")\r\n  list(on_fail = on_fail, on_success = on_success, on_crit = on_crit, bonus_pmf = bonus_pmf)\r\n}\r\n\r\n","type":"text"},{"name":"spells_2014.rds","content":"WAoAAAACAAQEAgACAwAAAAMTAAAABgAAABAAAADCAAQACQAAAAtBY2lkIFNwbGFzaAAEAAkA\nAAANQXJtcyBvZiBIYWRhcgAEAAkAAAANQnVybmluZyBIYW5kcwAEAAkAAAALQ2hpbGwgVG91\nY2gABAAJAAAADUNocm9tYXRpYyBPcmIABAAJAAAAEkRpc3NvbmFudCBXaGlzcGVycwAEAAkA\nAAAMRGl2aW5lIEZhdm9yAAQACQAAAA5FbGRyaXRjaCBCbGFzdAAEAAkAAAAQRW5zbmFyaW5n\nIFN0cmlrZQAEAAkAAAAJRmlyZSBCb2x0AAQACQAAAAxHdWlkaW5nIEJvbHQABAAJAAAADkhh\naWwgb2YgVGhvcm5zAAQACQAAAA5IZWxsaXNoIFJlYnVrZQAEAAkAAAADSGV4AAQACQAAAA1I\ndW50ZXIncyBNYXJrAAQACQAAAA5JbmZsaWN0IFdvdW5kcwAEAAkAAAANTWFnaWMgTWlzc2ls\nZQAEAAkAAAAMUG9pc29uIFNwcmF5AAQACQAAAA1Qcm9kdWNlIEZsYW1lAAQACQAAAAxSYXkg\nb2YgRnJvc3QABAAJAAAAD1JheSBvZiBTaWNrbmVzcwAEAAkAAAAMU2FjcmVkIEZsYW1lAAQA\nCQAAAA1TZWFyaW5nIFNtaXRlAAQACQAAAA5TaG9ja2luZyBHcmFzcAAEAAkAAAAFU2xlZXAA\nBAAJAAAAClRob3JuIFdoaXAABAAJAAAAEFRodW5kZXJvdXMgU21pdGUABAAJAAAAC1RodW5k\nZXJ3YXZlAAQACQAAAA9WaWNpb3VzIE1vY2tlcnkABAAJAAAACldpdGNoIEJvbHQABAAJAAAA\nDldyYXRoZnVsIFNtaXRlAAQACQAAABBTcGlyaXR1YWwgV2VhcG9uAAQACQAAAAxCZXN0b3cg\nQ3Vyc2UABAAJAAAABkJsaWdodAAEAAkAAAAOQmxpbmRpbmcgU21pdGUABAAJAAAADkNhbGwg\nTGlnaHRuaW5nAAQACQAAABBDbG91ZCBvZiBEYWdnZXJzAAQACQAAAA9Db25qdXJlIEJhcnJh\nZ2UABAAJAAAAEUNydXNhZGVyJ3MgTWFudGxlAAQACQAAABBFbGVtZW50YWwgV2VhcG9uAAQA\nCQAAAAhGaXJlYmFsbAAEAAkAAAAPSHVuZ2VyIG9mIEhhZGFyAAQACQAAAA9MaWdodG5pbmcg\nQXJyb3cABAAJAAAACkFsdGVyIFNlbGYABAAJAAAAD01lbGQgSW50byBTdG9uZQAEAAkAAAAQ\nU3Bpcml0IEd1YXJkaWFucwAEAAkAAAANQ29udHJvbCBXYXRlcgAEAAkAAAAOQnJhbmRpbmcg\nU21pdGUABAAJAAAAEENvcmRvbiBPZiBBcnJvd3MABAAJAAAAD0NvbnRyb2wgV2VhdGhlcgAE\nAAkAAAAKRWFydGhxdWFrZQAEAAkAAAAKRmVlYmxlbWluZAAEAAkAAAAQSW5jZW5kaWFyeSBD\nbG91ZAAEAAkAAAAMTWV0ZW9yIFN3YXJtAAQACQAAAA5QcmlzbWF0aWMgV2FsbAAEAAkAAAAS\nU3Rvcm0gb2YgVmVuZ2VhbmNlAAQACQAAAAhTdW5idXJzdAAEAAkAAAAHVHN1bmFtaQAEAAkA\nAAAFV2VpcmQABAAJAAAABFdpc2gABAAJAAAAFkRlbGF5ZWQgQmxhc3QgRmlyZWJhbGwABAAJ\nAAAADkRpbWVuc2lvbiBEb29yAAQACQAAAA9GaW5nZXIgb2YgRGVhdGgABAAJAAAACkZpcmUg\nU3Rvcm0ABAAJAAAAFE1vcmRlbmthaW5lbidzIFN3b3JkAAQACQAAAA9QcmlzbWF0aWMgU3By\nYXkABAAJAAAABlN5bWJvbAAEAAkAAAAPQmFuaXNoaW5nIFNtaXRlAAQACQAAAA1CbGFkZSBC\nYXJyaWVyAAQACQAAAA9DaGFpbiBMaWdodG5pbmcABAAJAAAAD0NpcmNsZSBvZiBEZWF0aAAE\nAAkAAAAJQ2xvdWRraWxsAAQACQAAAAxDb25lIG9mIENvbGQABAAJAAAADkNvbmp1cmUgVm9s\nbGV5AAQACQAAABNDb250YWN0IE90aGVyIFBsYW5lAAQACQAAABBEZXN0cnVjdGl2ZSBXYXZl\nAAQACQAAAAxEaXNpbnRlZ3JhdGUABAAJAAAABURyZWFtAAQACQAAAA9FbmhhbmNlIEFiaWxp\ndHkABAAJAAAADkVubGFyZ2UvUmVkdWNlAAQACQAAABdFdmFyZCdzIEJsYWNrIFRlbnRhY2xl\ncwAEAAkAAAALRmlyZSBTaGllbGQABAAJAAAAC0ZsYW1lIEJsYWRlAAQACQAAAAxGbGFtZSBT\ndHJpa2UABAAJAAAADkZsYW1pbmcgU3BoZXJlAAQACQAAAAtGb3JiaWRkYW5jZQAEAAkAAAAM\nQmlnYnkncyBIYW5kAAQACQAAAARHZWFzAAQACQAAABBHbHlwaCBvZiBXYXJkaW5nAAQACQAA\nAARIYXJtAAQACQAAAApIZWF0IE1ldGFsAAQACQAAAA1IZXJvZXMnIEZlYXN0AAQACQAAAAlJ\nY2UgU3Rvcm0ABAAJAAAADUluc2VjdCBQbGFndWUABAAJAAAADkxpZ2h0bmluZyBCb2x0AAQA\nCQAAABFNZWxmJ3MgQWNpZCBBcnJvdwAEAAkAAAAITW9vbmJlYW0ABAAJAAAAHU1vcmRlbmth\naW5lbidzIEZhaXRoZnVsIEhvdW5kAAQACQAAABlPdGlsdWtlJ3MgRnJlZXppbmcgU3BoZXJl\nAAQACQAAABBQaGFudGFzbWFsIEZvcmNlAAQACQAAABFQaGFudGFzbWFsIEtpbGxlcgAEAAkA\nAAANU2NvcmNoaW5nIFJheQAEAAkAAAAHU2hhdHRlcgAEAAkAAAAMU3Bpa2UgR3Jvd3RoAAQA\nCQAAABBTdGFnZ2VyaW5nIFNtaXRlAAQACQAAAAdTdW5iZWFtAAQACQAAAA5WYW1waXJpYyBU\nb3VjaAAEAAkAAAAMV2FsbCBvZiBGaXJlAAQACQAAAAtXYWxsIG9mIEljZQAEAAkAAAAOV2Fs\nbCBvZiBUaG9ybnMABAAJAAAAA1dlYgAEAAkAAAAJV2luZCBXYWxsAAQACQAAAAxFYXJ0aCBU\ncmVtb3IABAAJAAAAC1RodW5kZXJjbGFwAAQACQAAAA5DcmVhdGUgQm9uZmlyZQAEAAkAAAAJ\nRnJvc3RiaXRlAAQACQAAAAtNYWdpYyBTdG9uZQAEAAkAAAAPQWJzb3JiIEVsZW1lbnRzAAQA\nCQAAAAlJY2UgS25pZmUABAAJAAAACkR1c3QgRGV2aWwABAAJAAAAFEFnYW5henphcidzIFNj\nb3JjaGVyAAQACQAAABJCb25lcyBvZiB0aGUgRWFydGgABAAJAAAACENhdGFwdWx0AAQACQAA\nAA5FbGVtZW50YWwgQmFuZQAEAAkAAAAORXJ1cHRpbmcgRWFydGgABAAJAAAADEZsYW1lIEFy\ncm93cwAEAAkAAAAUSW52ZXN0aXR1cmUgb2YgRmxhbWUABAAJAAAAEkludmVzdGl0dXJlIG9m\nIEljZQAEAAkAAAATSW52ZXN0aXR1cmUgb2YgV2luZAAEAAkAAAAJTWFlbHN0cm9tAAQACQAA\nABpNYXhpbWlsaWFuJ3MgRWFydGhlbiBHcmFzcAAEAAkAAAAYU25pbGxvYydzIFNub3diYWxs\nIFN3YXJtAAQACQAAAApUaWRhbCBXYXZlAAQACQAAAA5UcmFuc211dGUgUm9jawAEAAkAAAAJ\nV2hpcmx3aW5kAAQACQAAABtBYmktRGFsemltJ3MgSG9ycmlkIFdpbHRpbmcABAAJAAAACklt\nbW9sYXRpb24ABAAJAAAAFU1lbGYncyBNaW51dGUgTWV0ZW9ycwAEAAkAAAAMU3Rvcm0gU3Bo\nZXJlAAQACQAAABBWaXRyaW9saWMgU3BoZXJlAAQACQAAAA1Cb29taW5nIEJsYWRlAAQACQAA\nABFHcmVlbi1GbGFtZSBCbGFkZQAEAAkAAAAOTGlnaHRuaW5nIEx1cmUABAAJAAAAC1N3b3Jk\nIEJ1cnN0AAQACQAAAA9EcmFnb24ncyBCcmVhdGgABAAJAAAAC0luZmVzdGF0aW9uAAQACQAA\nABFMaWZlIFRyYW5zZmVyZW5jZQAEAAkAAAAKTWluZCBTcGlrZQAEAAkAAAAMU2hhZG93IEJs\nYWRlAAQACQAAAAxUaHVuZGVyIFN0ZXAABAAJAAAADVRvbGwgdGhlIERlYWQABAAJAAAACkNo\nYW9zIEJvbHQABAAJAAAAEkd1YXJkaWFuIG9mIE5hdHVyZQAEAAkAAAALSG9seSBXZWFwb24A\nBAAJAAAAD1ByaW1hbCBTYXZhZ2VyeQAEAAkAAAAOUHN5Y2hpYyBTY3JlYW0ABAAJAAAADlNo\nYWRvdyBvZiBNb2lsAAQACQAAABJTaWNrZW5pbmcgUmFkaWFuY2UABAAJAAAAEFdvcmQgb2Yg\nUmFkaWFuY2UABAAJAAAAD1dyYXRoIG9mIE5hdHVyZQAEAAkAAAANWmVwaHlyIFN0cmlrZQAE\nAAkAAAAERGF3bgAEAAkAAAAKRW5lcnZhdGlvbgAEAAkAAAARQ3JlYXRlIEhvbXVuY3VsdXMA\nBAAJAAAADkNyb3duIG9mIFN0YXJzAAQACQAAAA9JbGx1c29yeSBEcmFnb24ABAAJAAAADU1l\nbnRhbCBQcmlzb24ABAAJAAAAFU5lZ2F0aXZlIEVuZXJneSBGbG9vZAAEAAkAAAARU3RlZWwg\nV2luZCBTdHJpa2UABAAJAAAAD1N5bmFwdGljIFN0YXRpYwAEAAkAAAAXVGVuc2VyJ3MgVHJh\nbnNmb3JtYXRpb24ABAAJAAAADVdhbGwgb2YgTGlnaHQABAAJAAAAEk1hZGRlbmluZyBEYXJr\nbmVzcwAEAAkAAAARQmxhZGUgb2YgRGlzYXN0ZXIABAAJAAAAC01pbmQgU2xpdmVyAAQACQAA\nAA1TcGlyaXQgU2hyb3VkAAQACQAAABRUYXNoYSdzIENhdXN0aWMgQnJldwAEAAkAAAARVGFz\naGEncyBNaW5kIFdoaXAABAAJAAAAE0FzaGFyZGFsb24ncyBTdHJpZGUABAAJAAAAF0RyYWNv\nbmljIFRyYW5zZm9ybWF0aW9uAAQACQAAABlSYXVsb3RoaW0ncyBQc3ljaGljIExhbmNlAAQA\nCQAAABJSaW1lJ3MgQmluZGluZyBJY2UABAAJAAAADUtpbmV0aWMgSmF1bnQABAAJAAAAEFdp\ndGhlciBhbmQgQmxvb20ABAAJAAAADVNhcHBpbmcgU3RpbmcABAAJAAAACURhcmsgU3RhcgAE\nAAkAAAAPR3Jhdml0eSBGaXNzdXJlAAQACQAAABBHcmF2aXR5IFNpbmtob2xlAAQACQAAAA9N\nYWduaWZ5IEdyYXZpdHkABAAJAAAAClB1bHNlIFdhdmUABAAJAAAADVJhdmVub3VzIFZvaWQA\nBAAJAAAADUZyb3N0IEZpbmdlcnMABAAJAAAACkFudGFnb25pemUABAAJAAAADlNwcmF5IG9m\nIENhcmRzAAAAEAAAAMIABAAJAAAAG2FydGlmaWNlciwgc29yY2VyZXIsIHdpemFyZAAEAAkA\nAAAgd2FybG9jaywgc29yY2VyZXI6IGFiZXJyYW50IG1pbmQABAAJAAAAWHNvcmNlcmVyLCB3\naXphcmQsIGNsZXJpYzogbGlnaHQsIGRydWlkOiB3aWxkZmlyZSwgd2FybG9jazogZmllbmQs\nIHdhcmxvY2s6IGdlbmllIGVmcmVldGkABAAJAAAAKHNvcmNlcmVyLCB3YXJsb2NrLCB3aXph\ncmQsIGRydWlkOiBzcG9yZXMABAAJAAAAEHNvcmNlcmVyLCB3aXphcmQABAAJAAAANWJhcmQs\nIHNvcmNlcmVyOiBhYmVycmFudCBtaW5kLCB3YXJsb2NrOiBncmVhdCBvbGQgb25lAAQACQAA\nABRwYWxhZGluLCBjbGVyaWM6IHdhcgAEAAkAAAAHd2FybG9jawAEAAkAAAAZcmFuZ2VyLCBw\nYWxhZGluOiBhbmNpZW50cwAEAAkAAAAbYXJ0aWZpY2VyLCBzb3JjZXJlciwgd2l6YXJkAAQA\nCQAAACpjbGVyaWMsIHBhbGFkaW46IGdsb3J5LCB3YXJsb2NrOiBjZWxlc3RpYWwABAAJAAAA\nBnJhbmdlcgAEAAkAAAAdd2FybG9jaywgcGFsYWRpbjogb2F0aGJyZWFrZXIABAAJAAAAB3dh\ncmxvY2sABAAJAAAAGnJhbmdlciwgcGFsYWRpbjogdmVuZ2VhbmNlAAQACQAAABxjbGVyaWMs\nIHBhbGFkaW46IG9hdGhicmVha2VyAAQACQAAADRzb3JjZXJlciwgd2l6YXJkLCBhcnRpZmlj\nZXI6IGFybW9yZXIsIGNsZXJpYzogYXJjYW5hAAQACQAAACthcnRpZmljZXIsIGRydWlkLCBz\nb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAAAVkcnVpZAAEAAkAAAAbYXJ0aWZpY2Vy\nLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAAEdzb3JjZXJlciwgd2l6YXJkLCBhcnRpZmljZXI6\nIGFsY2hlbWlzdCwgY2xlcmljOiBkZWF0aCwgd2FybG9jazogdW5keWluZwAEAAkAAAAGY2xl\ncmljAAQACQAAAB5wYWxhZGluLCByYW5nZXIsIGNsZXJpYzogZm9yZ2UABAAJAAAAG2FydGlm\naWNlciwgc29yY2VyZXIsIHdpemFyZAAEAAkAAABLYmFyZCwgc29yY2VyZXIsIHdpemFyZCwg\nY2xlcmljOiB0d2lsaWdodCwgcGFsYWRpbjogcmVkZW1wdGlvbiwgd2FybG9jazogZmV5AAQA\nCQAAABBhcnRpZmljZXIsIGRydWlkAAQACQAAAAdwYWxhZGluAAQACQAAAIZiYXJkLCBkcnVp\nZCwgc29yY2VyZXIsIHdpemFyZCwgYXJ0aWZpY2VyOiBhcm1vcmVyLCBhcnRpZmljZXI6IGFy\ndGlsbGVyaXN0LCBjbGVyaWM6IHRlbXBlc3QsIHdhcmxvY2s6IGZhdGhvbWxlc3MsIHdhcmxv\nY2s6IGdlbmllIGRqaW5uaQAEAAkAAAAEYmFyZAAEAAkAAAAZc29yY2VyZXIsIHdhcmxvY2ss\nIHdpemFyZAAEAAkAAAAacGFsYWRpbiwgd2FybG9jazogaGV4YmxhZGUABAAJAAAAGWNsZXJp\nYywgcGFsYWRpbjogY29ucXVlc3QABAAJAAAAPWJhcmQsIGNsZXJpYywgd2l6YXJkLCBwYWxh\nZGluOiBjb25xdWVzdCwgcGFsYWRpbjogb2F0aGJyZWFrZXIABAAJAAAAamRydWlkLCBzb3Jj\nZXJlciwgd2FybG9jaywgd2l6YXJkLCBhcnRpZmljZXI6IGFsY2hlbWlzdCwgY2xlcmljOiBk\nZWF0aCwgY2xlcmljOiBncmF2ZSwgcGFsYWRpbjogb2F0aGJyZWFrZXIABAAJAAAAB3BhbGFk\naW4ABAAJAAAAFmRydWlkLCBjbGVyaWM6IHRlbXBlc3QABAAJAAAAH2JhcmQsIHNvcmNlcmVy\nLCB3YXJsb2NrLCB3aXphcmQABAAJAAAAH3JhbmdlciwgYXJ0aWZpY2VyOiBiYXR0bGUgc21p\ndGgABAAJAAAAFHBhbGFkaW4sIGNsZXJpYzogd2FyAAQACQAAAENhcnRpZmljZXIsIGRydWlk\nLCBwYWxhZGluLCByYW5nZXIsIGNsZXJpYzogZm9yZ2UsIHdhcmxvY2s6IGhleGJsYWRlAAQA\nCQAAAF9zb3JjZXJlciwgd2l6YXJkLCBhcnRpZmljZXI6IGFydGlsbGVyaXN0LCBjbGVyaWM6\nIGxpZ2h0LCB3YXJsb2NrOiBmaWVuZCwgd2FybG9jazogZ2VuaWUgZWZyZWV0aQAEAAkAAAAg\nd2FybG9jaywgc29yY2VyZXI6IGFiZXJyYW50IG1pbmQABAAJAAAABnJhbmdlcgAEAAkAAAAb\nYXJ0aWZpY2VyLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAACljbGVyaWMsIGRydWlkLCByYW5n\nZXIsIHdhcmxvY2s6IGdlbmllIGRhbwAEAAkAAAAWY2xlcmljLCBwYWxhZGluOiBjcm93bgAE\nAAkAAABAY2xlcmljLCBkcnVpZCwgd2l6YXJkLCB3YXJsb2NrOiBmYXRob21sZXNzLCB3YXJs\nb2NrOiBnZW5pZSBtYXJpZAAEAAkAAAAzcGFsYWRpbiwgYXJ0aWZpY2VyOiBiYXR0bGUgc21p\ndGgsIHdhcmxvY2s6IGhleGJsYWRlAAQACQAAAAZyYW5nZXIABAAJAAAAFWNsZXJpYywgZHJ1\naWQsIHdpemFyZAAEAAkAAAAXY2xlcmljLCBkcnVpZCwgc29yY2VyZXIABAAJAAAAHGJhcmQs\nIGRydWlkLCB3YXJsb2NrLCB3aXphcmQABAAJAAAAF2RydWlkLCBzb3JjZXJlciwgd2l6YXJk\nAAQACQAAABBzb3JjZXJlciwgd2l6YXJkAAQACQAAAAxiYXJkLCB3aXphcmQABAAJAAAABWRy\ndWlkAAQACQAAAB9jbGVyaWMsIGRydWlkLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAAAVkcnVp\nZAAEAAkAAAAPd2FybG9jaywgd2l6YXJkAAQACQAAAGlzb3JjZXJlciwgd2l6YXJkLCB3YXJs\nb2NrOiBnZW5pZSBkYW8sIHdhcmxvY2s6IGdlbmllIGRqaW5uaSwgd2FybG9jazogZ2VuaWUg\nZWZyZWV0aSwgd2FybG9jazogZ2VuaWUgbWFyaWQABAAJAAAAEHNvcmNlcmVyLCB3aXphcmQA\nBAAJAAAAWmJhcmQsIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQsIGNsZXJpYzogdHJpY2tl\ncnksIHBhbGFkaW46IGFuY2llbnRzLCByYW5nZXI6IGZleSB3YW5kZXJlcgAEAAkAAAAZc29y\nY2VyZXIsIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAXY2xlcmljLCBkcnVpZCwgc29yY2VyZXIA\nBAAJAAAADGJhcmQsIHdpemFyZAAEAAkAAAAWYmFyZCwgc29yY2VyZXIsIHdpemFyZAAEAAkA\nAAAbYmFyZCwgZHJ1aWQsIHdpemFyZCwgY2xlcmljAAQACQAAADNwYWxhZGluLCBhcnRpZmlj\nZXI6IGJhdHRsZSBzbWl0aCwgd2FybG9jazogaGV4YmxhZGUABAAJAAAABmNsZXJpYwAEAAkA\nAAAQc29yY2VyZXIsIHdpemFyZAAEAAkAAAAZc29yY2VyZXIsIHdhcmxvY2ssIHdpemFyZAAE\nAAkAAAB6c29yY2VyZXIsIHdpemFyZCwgYXJ0aWZpY2VyOiBhbGNoZW1pc3QsIGNsZXJpYzog\nZGVhdGgsIGRydWlkOiBzcG9yZXMsIGRydWlkOiB1bmRlcmRhcmssIHBhbGFkaW46IGNvbnF1\nZXN0LCB3YXJsb2NrOiB1bmRlYWQABAAJAAAAbWRydWlkLCBzb3JjZXJlciwgd2l6YXJkLCBh\ncnRpZmljZXI6IGFydGlsbGVyaXN0LCB3YXJsb2NrOiBmYXRob21sZXNzLCB3YXJsb2NrOiBn\nZW5pZSBtYXJpZCwgd2FybG9jazogaGV4YmxhZGUABAAJAAAABnJhbmdlcgAEAAkAAAAPd2Fy\nbG9jaywgd2l6YXJkAAQACQAAABhwYWxhZGluLCBjbGVyaWM6IHRlbXBlc3QABAAJAAAAEHNv\ncmNlcmVyLCB3aXphcmQABAAJAAAAJ2JhcmQsIHdhcmxvY2ssIHdpemFyZCwgZHJ1aWQ6IGdy\nYXNzbGFuZAAEAAkAAABIYXJ0aWZpY2VyLCBiYXJkLCBjbGVyaWMsIGRydWlkLCByYW5nZXIs\nIHNvcmNlcmVyLCB3aXphcmQsIHBhbGFkaW46IGdsb3J5AAQACQAAAChhcnRpZmljZXIsIGJh\ncmQsIGRydWlkLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAADd3aXphcmQsIHNvcmNlcmVyOiBh\nYmVycmFudCBtaW5kLCB3YXJsb2NrOiBncmVhdCBvbGQgb25lAAQACQAAAGxkcnVpZCwgc29y\nY2VyZXIsIHdpemFyZCwgYXJ0aWZpY2VyOiBhcm1vcmVyLCBhcnRpZmljZXI6IGJhdHRsZSBz\nbWl0aCwgd2FybG9jazogZmllbmQsIHdhcmxvY2s6IGdlbmllIGVmcmVldGkABAAJAAAAD2Ry\ndWlkLCBzb3JjZXJlcgAEAAkAAAB2Y2xlcmljLCBkcnVpZDogd2lsZGZpcmUsIHBhbGFkaW46\nIGRldm90aW9uLCBwYWxhZGluOiBnbG9yeSwgd2FybG9jazogY2VsZXN0aWFsLCB3YXJsb2Nr\nOiBmaWVuZCwgd2FybG9jazogZ2VuaWUgZWZyZWV0aQAEAAkAAABQZHJ1aWQsIHNvcmNlcmVy\nLCB3aXphcmQsIGFydGlmaWNlcjogYWxjaGVtaXN0LCBjbGVyaWM6IGxpZ2h0LCB3YXJsb2Nr\nOiBjZWxlc3RpYWwABAAJAAAABmNsZXJpYwAEAAkAAAAwYXJ0aWZpY2VyLCBzb3JjZXJlciwg\nd2l6YXJkLCB3YXJsb2NrOiBmYXRob21sZXNzAAQACQAAACRjbGVyaWMsIHdpemFyZCwgcGFs\nYWRpbiwgZHJ1aWQsIGJhcmQABAAJAAAAH2FydGlmaWNlciwgYmFyZCwgY2xlcmljLCB3aXph\ncmQABAAJAAAABmNsZXJpYwAEAAkAAAAlYXJ0aWZpY2VyLCBiYXJkLCBkcnVpZCwgY2xlcmlj\nOiBmb3JnZQAEAAkAAAATYmFyZCwgY2xlcmljLCBkcnVpZAAEAAkAAABTZHJ1aWQsIHNvcmNl\ncmVyLCB3aXphcmQsIGFydGlmaWNlcjogYXJ0aWxsZXJpc3QsIGNsZXJpYzogdGVtcGVzdCwg\ncGFsYWRpbjogYW5jaWVudHMABAAJAAAALGNsZXJpYywgZHJ1aWQsIHNvcmNlcmVyLCByYW5n\nZXI6IHN3YXJta2VlcGVyAAQACQAAAEpzb3JjZXJlciwgd2l6YXJkLCBhcnRpZmljZXI6IGFy\nbW9yZXIsIGRydWlkOiBtb3VudGFpbiwgd2FybG9jazogZmF0aG9tbGVzcwAEAAkAAAAqd2l6\nYXJkLCBhcnRpZmljZXI6IGFsY2hlbWlzdCwgZHJ1aWQ6IHN3YW1wAAQACQAAAD1kcnVpZCwg\nY2xlcmljOiB0d2lsaWdodCwgcGFsYWRpbjogYW5jaWVudHMsIHBhbGFkaW46IHdhdGNoZXJz\nAAQACQAAABFhcnRpZmljZXIsIHdpemFyZAAEAAkAAAAQc29yY2VyZXIsIHdpemFyZAAEAAkA\nAACmYmFyZCwgc29yY2VyZXIsIHdpemFyZCwgd2FybG9jazogZmV5LCB3YXJsb2NrOiBnZW5p\nZSBkYW8sIHdhcmxvY2s6IGdlbmllIGRqaW5uaSwgd2FybG9jazogZ2VuaWUgZWZyZWV0aSwg\nd2FybG9jazogZ2VuaWUgbWFyaWQsIHdhcmxvY2s6IGdyZWF0IG9sZCBvbmUsIHdhcmxvY2s6\nIHVuZGVhZAAEAAkAAAB4YmFyZCwgd2l6YXJkLCB3YXJsb2NrOiBnZW5pZSBkYW8sIHdhcmxv\nY2s6IGdlbmllIGRqaW5uaSwgd2FybG9jazogZ2VuaWUgZWZyZWV0aSwgd2FybG9jazogZ2Vu\naWUgbWFyaWQsIHdhcmxvY2s6IGhleGJsYWRlAAQACQAAAHBzb3JjZXJlciwgd2l6YXJkLCBh\ncnRpZmljZXI6IGFydGlsbGVyaXN0LCBjbGVyaWM6IGxpZ2h0LCBkcnVpZDogd2lsZGZpcmUs\nIHdhcmxvY2s6IGZpZW5kLCB3YXJsb2NrOiBnZW5pZSBlZnJlZXRpAAQACQAAAFxiYXJkLCBz\nb3JjZXJlciwgd2FybG9jaywgd2l6YXJkLCBhcnRpZmljZXI6IGFybW9yZXIsIGFydGlmaWNl\ncjogYXJ0aWxsZXJpc3QsIGNsZXJpYzogdGVtcGVzdAAEAAkAAAAxZHJ1aWQsIHJhbmdlciwg\nY2xlcmljOiBuYXR1cmUsIHdhcmxvY2s6IGdlbmllIGRhbwAEAAkAAAAacGFsYWRpbiwgd2Fy\nbG9jazogaGV4YmxhZGUABAAJAAAAH2NsZXJpYywgZHJ1aWQsIHNvcmNlcmVyLCB3aXphcmQA\nBAAJAAAAN3NvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQsIGNsZXJpYzogZGVhdGgsIGNsZXJp\nYzogZ3JhdmUABAAJAAAAcWRydWlkLCBzb3JjZXJlciwgd2l6YXJkLCBhcnRpZmljZXI6IGFy\ndGlsbGVyaXN0LCBjbGVyaWM6IGZvcmdlLCBjbGVyaWM6IGxpZ2h0LCB3YXJsb2NrOiBjZWxl\nc3RpYWwsIHdhcmxvY2s6IGZpZW5kAAQACQAAAAZ3aXphcmQABAAJAAAABWRydWlkAAQACQAA\nAEJhcnRpZmljZXIsIHNvcmNlcmVyLCB3aXphcmQsIGRydWlkOiB1bmRlcmRhcmssIHJhbmdl\ncjogc3dhcm1rZWVwZXIABAAJAAAATGRydWlkLCByYW5nZXIsIGFydGlmaWNlcjogYXJ0aWxs\nZXJpc3QsIGNsZXJpYzogbmF0dXJlLCB3YXJsb2NrOiBnZW5pZSBkamlubmkABAAJAAAAHWJh\ncmQsIGRydWlkLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAADFhcnRpZmljZXIsIGJhcmQsIGRy\ndWlkLCBzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAACthcnRpZmljZXIsIGRydWlk\nLCBzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAACthcnRpZmljZXIsIGRydWlkLCBz\nb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAABlhcnRpZmljZXIsIGRydWlkLCB3YXJs\nb2NrAAQACQAAACphcnRpZmljZXIsIGRydWlkLCByYW5nZXIsIHNvcmNlcmVyLCB3aXphcmQA\nBAAJAAAAF2RydWlkLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAABdkcnVpZCwgc29yY2VyZXIs\nIHdpemFyZAAEAAkAAAAQc29yY2VyZXIsIHdpemFyZAAEAAkAAAAFZHJ1aWQABAAJAAAAG2Fy\ndGlmaWNlciwgc29yY2VyZXIsIHdpemFyZAAEAAkAAAAhYXJ0aWZpY2VyLCBkcnVpZCwgd2Fy\nbG9jaywgd2l6YXJkAAQACQAAABdkcnVpZCwgc29yY2VyZXIsIHdpemFyZAAEAAkAAAAqYXJ0\naWZpY2VyLCBkcnVpZCwgcmFuZ2VyLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAACBkcnVpZCwg\nc29yY2VyZXIsIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAgZHJ1aWQsIHNvcmNlcmVyLCB3YXJs\nb2NrLCB3aXphcmQABAAJAAAAIGRydWlkLCBzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQA\nCQAAAAVkcnVpZAAEAAkAAAAQc29yY2VyZXIsIHdpemFyZAAEAAkAAAAQc29yY2VyZXIsIHdp\nemFyZAAEAAkAAAAXZHJ1aWQsIHNvcmNlcmVyLCB3aXphcmQABAAJAAAAGGFydGlmaWNlciwg\nZHJ1aWQsIHdpemFyZAAEAAkAAAAXZHJ1aWQsIHNvcmNlcmVyLCB3aXphcmQABAAJAAAAEHNv\ncmNlcmVyLCB3aXphcmQABAAJAAAAEHNvcmNlcmVyLCB3aXphcmQABAAJAAAAEHNvcmNlcmVy\nLCB3aXphcmQABAAJAAAAEHNvcmNlcmVyLCB3aXphcmQABAAJAAAAEHNvcmNlcmVyLCB3aXph\ncmQABAAJAAAAJGFydGlmaWNlciwgc29yY2VyZXIsIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAk\nYXJ0aWZpY2VyLCBzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAACRhcnRpZmljZXIs\nIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJAAAAJGFydGlmaWNlciwgc29yY2VyZXIs\nIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAQc29yY2VyZXIsIHdpemFyZAAEAAkAAAAgZHJ1aWQs\nIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJAAAADmNsZXJpYywgd2l6YXJkAAQACQAA\nABlzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAABlzb3JjZXJlciwgd2FybG9jaywg\nd2l6YXJkAAQACQAAABlzb3JjZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAABdjbGVyaWMs\nIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAIc29yY2VyZXIABAAJAAAADWRydWlkLCByYW5nZXIA\nBAAJAAAAD2NsZXJpYywgcGFsYWRpbgAEAAkAAAAFZHJ1aWQABAAJAAAAH2JhcmQsIHNvcmNl\ncmVyLCB3YXJsb2NrLCB3aXphcmQABAAJAAAAB3dhcmxvY2sABAAJAAAAGXNvcmNlcmVyLCB3\nYXJsb2NrLCB3aXphcmQABAAJAAAABmNsZXJpYwAEAAkAAAANZHJ1aWQsIHJhbmdlcgAEAAkA\nAAAGcmFuZ2VyAAQACQAAAA5jbGVyaWMsIHdpemFyZAAEAAkAAAAZc29yY2VyZXIsIHdhcmxv\nY2ssIHdpemFyZAAEAAkAAAAGd2l6YXJkAAQACQAAABlzb3JjZXJlciwgd2FybG9jaywgd2l6\nYXJkAAQACQAAAAZ3aXphcmQABAAJAAAAGXNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJ\nAAAAD3dhcmxvY2ssIHdpemFyZAAEAAkAAAAOcmFuZ2VyLCB3aXphcmQABAAJAAAAH2JhcmQs\nIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJAAAABndpemFyZAAEAAkAAAAZc29yY2Vy\nZXIsIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAPd2FybG9jaywgd2l6YXJkAAQACQAAABlzb3Jj\nZXJlciwgd2FybG9jaywgd2l6YXJkAAQACQAAABlzb3JjZXJlciwgd2FybG9jaywgd2l6YXJk\nAAQACQAAACBjbGVyaWMsIHBhbGFkaW4sIHdhcmxvY2ssIHdpemFyZAAEAAkAAAAbYXJ0aWZp\nY2VyLCBzb3JjZXJlciwgd2l6YXJkAAQACQAAABBzb3JjZXJlciwgd2l6YXJkAAQACQAAACNh\ncnRpZmljZXIsIHJhbmdlciwgc29yY2VyZXIsIHdpemFyZAAEAAkAAAAXZHJ1aWQsIHNvcmNl\ncmVyLCB3aXphcmQABAAJAAAAH2JhcmQsIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJ\nAAAAEHNvcmNlcmVyLCB3aXphcmQABAAJAAAAIWFydGlmaWNlciwgYmFyZCwgc29yY2VyZXIs\nIHdpemFyZAAEAAkAAAAXZHJ1aWQsIHNvcmNlcmVyLCB3aXphcmQABAAJAAAAJXdpemFyZDog\nY2hyb251cmd5LCB3aXphcmQ6IGdyYXZpdHVyZ3kABAAJAAAAEndpemFyZDogZ3Jhdml0dXJn\neQAEAAkAAAASd2l6YXJkOiBncmF2aXR1cmd5AAQACQAAABJ3aXphcmQ6IGdyYXZpdHVyZ3kA\nBAAJAAAAEndpemFyZDogZ3Jhdml0dXJneQAEAAkAAAAld2l6YXJkOiBjaHJvbnVyZ3ksIHdp\nemFyZDogZ3Jhdml0dXJneQAEAAkAAAASd2l6YXJkOiBncmF2aXR1cmd5AAQACQAAAAZ3aXph\ncmQABAAJAAAAH2JhcmQsIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQABAAJAAAAH2JhcmQs\nIHNvcmNlcmVyLCB3YXJsb2NrLCB3aXphcmQAAAAOAAAAwgAAAAAAAAAAP/AAAAAAAAA/8AAA\nAAAAAAAAAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAA/8AAAAAAAAAAA\nAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/8AAAAAAAAD/wAAAAAAAA\nP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAAAAAAAAAAAAP/AAAAAA\nAAAAAAAAAAAAAD/wAAAAAAAAAAAAAAAAAAA/8AAAAAAAAD/wAAAAAAAAAAAAAAAAAAA/8AAA\nAAAAAD/wAAAAAAAAQAAAAAAAAABACAAAAAAAAEAQAAAAAAAAQAgAAAAAAABACAAAAAAAAEAA\nAAAAAAAAQAgAAAAAAABACAAAAAAAAEAIAAAAAAAAQAgAAAAAAABACAAAAAAAAEAIAAAAAAAA\nQAAAAAAAAABACAAAAAAAAEAIAAAAAAAAQBAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQCAAAAAA\nAABAIAAAAAAAAEAgAAAAAAAAQCAAAAAAAABAIgAAAAAAAEAiAAAAAAAAQCIAAAAAAABAIAAA\nAAAAAEAgAAAAAAAAQCIAAAAAAABAIgAAAAAAAEAcAAAAAAAAQBAAAAAAAABAHAAAAAAAAEAc\nAAAAAAAAQBwAAAAAAABAHAAAAAAAAEAcAAAAAAAAQBQAAAAAAABAGAAAAAAAAEAYAAAAAAAA\nQBgAAAAAAABAFAAAAAAAAEAUAAAAAAAAQBQAAAAAAABAFAAAAAAAAEAUAAAAAAAAQBgAAAAA\nAABAFAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAEAAAAAAAAEAQAAAAAAAAQAAAAAAAAABAFAAA\nAAAAAEAAAAAAAAAAQBgAAAAAAABAFAAAAAAAAEAUAAAAAAAAQAgAAAAAAABAGAAAAAAAAEAA\nAAAAAAAAQBgAAAAAAABAEAAAAAAAAEAUAAAAAAAAQAgAAAAAAABAAAAAAAAAAEAAAAAAAAAA\nQBAAAAAAAABAGAAAAAAAAEAAAAAAAAAAQBAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAA\nAABAEAAAAAAAAEAYAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAYAAAAAAAAQBgAAAAAAABAAAAA\nAAAAAEAIAAAAAAAAP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/w\nAAAAAAAAP/AAAAAAAABAAAAAAAAAAEAAAAAAAAAAQBgAAAAAAAA/8AAAAAAAAEAQAAAAAAAA\nQAgAAAAAAABACAAAAAAAAEAYAAAAAAAAQBgAAAAAAABAGAAAAAAAAEAUAAAAAAAAQAAAAAAA\nAABAAAAAAAAAAEAIAAAAAAAAQBQAAAAAAABAHAAAAAAAAEAgAAAAAAAAQBQAAAAAAABACAAA\nAAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAA\nAAAAAAAAAAAAAAAAAABACAAAAAAAAEAAAAAAAAAAQAAAAAAAAABACAAAAAAAAAAAAAAAAAAA\nP/AAAAAAAABAEAAAAAAAAEAUAAAAAAAAAAAAAAAAAABAIgAAAAAAAEAQAAAAAAAAQBAAAAAA\nAAAAAAAAAAAAAEAUAAAAAAAAP/AAAAAAAABAFAAAAAAAAEAUAAAAAAAAQBgAAAAAAABAHAAA\nAAAAAEAgAAAAAAAAQBgAAAAAAABAFAAAAAAAAEAUAAAAAAAAQBQAAAAAAABAGAAAAAAAAEAU\nAAAAAAAAQCAAAAAAAABAIgAAAAAAAAAAAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAAAAAAAAAA\nQAgAAAAAAABAHAAAAAAAAEAQAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAA\nAABAIAAAAAAAAEAYAAAAAAAAQBAAAAAAAAA/8AAAAAAAAEAIAAAAAAAAQCIAAAAAAAA/8AAA\nAAAAAEAIAAAAAAAAQAAAAAAAAAAAAAAQAAAAwgAEAAkAAAADMWQ2AAQACQAAAAMyZDYABAAJ\nAAAAAzNkNgAEAAkAAAADMWQ4AAQACQAAAAMzZDgABAAJAAAAAzNkNgAEAAkAAAADMWQ0AAQA\nCQAAAAQxZDEwAAQACQAAAAMxZDYABAAJAAAABDFkMTAABAAJAAAAAzRkNgAEAAkAAAAEMWQx\nMAAEAAkAAAAEMmQxMAAEAAkAAAADMWQ2AAQACQAAAAMxZDYABAAJAAAABDNkMTAABAAJAAAA\nAzFkNAAEAAkAAAAEMWQxMgAEAAkAAAADMWQ4AAQACQAAABcxZDgsIDFkOCwgMmQ4LCAzZDgs\nIDRkOAAEAAkAAAADMmQ4AAQACQAAABcxZDgsIDFkOCwgMmQ4LCAzZDgsIDRkOAAEAAkAAAAI\nMWQ2LCAxZDYABAAJAAAAFzFkOCwgMWQ4LCAyZDgsIDNkOCwgNGQ4AAQACQAAAAM1ZDgABAAJ\nAAAAAzFkNgAEAAkAAAADMmQ2AAQACQAAAAMyZDgABAAJAAAAAzFkNAAEAAkAAAAKMWQxMiwg\nMWQxMgAEAAkAAAADMWQ2AAQACQAAAAMxZDgABAAJAAAAAzFkOAAEAAkAAAADOGQ4AAQACQAA\nAAMzZDgABAAJAAAACjNkMTAsIDFkMTAABAAJAAAAAzRkNAAEAAkAAAADM2Q4AAQACQAAAAMx\nZDQABAAJAAAAAzFkNAAEAAkAAAADOGQ2AAQACQAAAAgyZDYsIDJkNgAEAAkAAAAINGQ4LCAy\nZDgABAAJAAAAAzFkNgAEAAkAAAADNmQ2AAQACQAAAAgzZDgsIDNkOAAEAAkAAAAIMmQ4LCAy\nZDgABAAJAAAAAzJkNgAEAAkAAAADMWQ2AAQACQAAAAMxZDQABAAJAAAADjFkNiwgMWQxMCwg\nNWQ2AAQACQAAAAM0ZDYABAAJAAAABDEwZDgABAAJAAAACjIwZDYsIDIwZDYABAAJAAAAHDEw\nZDYsIDEwZDYsIDEwZDYsIDEwZDYsIDEwZDYABAAJAAAAGDJkNiwgMWQ2LCAxMGQ2LCAyZDYs\nIDFkNgAEAAkAAAAEMTJkNgAEAAkAAAAQNmQxMCwgNWQxMCwgMWQxMAAEAAkAAAAENGQxMAAE\nAAkAAAAJMWQxMCwgMmQ0AAQACQAAAAkxMmQ2LCAxZDYABAAJAAAAAzRkNgAEAAkAAAADN2Q4\nAAQACQAAAAQ3ZDEwAAQACQAAAAQzZDEwAAQACQAAABwxMGQ2LCAxMGQ2LCAxMGQ2LCAxMGQ2\nLCAxMGQ2AAQACQAAAAUxMGQxMAAEAAkAAAAENWQxMAAEAAkAAAAENmQxMAAEAAkAAAAEMTBk\nOAAEAAkAAAADOGQ2AAQACQAAAAM1ZDgABAAJAAAAAzhkOAAEAAkAAAADOGQ4AAQACQAAAAM2\nZDYABAAJAAAACDVkNiwgNWQ2AAQACQAAAAQxMGQ2AAQACQAAAAMzZDYABAAJAAAAAzJkNgAE\nAAkAAAAIMWQ0LCAxZDQABAAJAAAACDNkNiwgM2Q2AAQACQAAAAgyZDgsIDJkOAAEAAkAAAAD\nM2Q2AAQACQAAAAg0ZDYsIDRkNgAEAAkAAAADMmQ2AAQACQAAAAQ1ZDEwAAQACQAAAAg0ZDgs\nIDJkNgAEAAkAAAAENWQxMAAEAAkAAAADNWQ4AAQACQAAAAQxNGQ2AAQACQAAAAMyZDgABAAJ\nAAAABDJkMTAABAAJAAAACDJkOCwgNGQ2AAQACQAAAAQ0ZDEwAAQACQAAAAM4ZDYABAAJAAAA\nCDRkNCwgMmQ0AAQACQAAAAQyZDEwAAQACQAAAAM0ZDgABAAJAAAABDEwZDYABAAJAAAAAzFk\nNgAEAAkAAAAENGQxMAAEAAkAAAADMmQ2AAQACQAAAAMzZDgABAAJAAAAAzJkNAAEAAkAAAAD\nNGQ2AAQACQAAAAM2ZDgABAAJAAAAAzNkNgAEAAkAAAAINWQ4LCA1ZDgABAAJAAAACTEwZDYs\nIDVkNgAEAAkAAAAIN2Q4LCA3ZDgABAAJAAAAAzJkNAAEAAkAAAADM2Q4AAQACQAAAAMxZDYA\nBAAJAAAAFzFkNiwgMWQ2LCAyZDYsIDNkNiwgNGQ2AAQACQAAABcxZDgsIDFkOCwgMmQ4LCAz\nZDgsIDRkOAAEAAkAAAAXMWQ2LCAxZDYsIDJkNiwgM2Q2LCA0ZDYABAAJAAAAAzFkNgAEAAkA\nAAADMWQ2AAQACQAAAAkxZDEwLCAyZDYABAAJAAAAAzFkOAAEAAkAAAADM2Q4AAQACQAAAAM2\nZDYABAAJAAAAAzNkOAAEAAkAAAADMmQ2AAQACQAAAAQzZDEyAAQACQAAAAMxZDYABAAJAAAA\nCTFkMTAsIDRkOAAEAAkAAAADNGQ2AAQACQAAAAQyZDEwAAQACQAAAAM2ZDYABAAJAAAACDJk\nNiwgMmQ2AAQACQAAAAMzZDYABAAJAAAAAzRkOAAEAAkAAAADNGQ4AAQACQAAAAkxMGQ2LCAz\nZDYABAAJAAAABDEyZDgABAAJAAAACDhkNiwgNGQ2AAQACQAAAAMyZDYABAAJAAAACDJkNiwg\nNGQ2AAQACQAAAAkxMGQ0LCA1ZDQABAAJAAAAJjFkOCwgMWQ4LCAyZDgsIDFkOCwgMmQ4LCAz\nZDgsIDNkOCwgNGQ4AAQACQAAACExZDgsIDFkOCwgMWQ4LCAyZDgsIDJkOCwgM2Q4LCAzZDgA\nBAAJAAAAAzFkOAAEAAkAAAADMWQ2AAQACQAAAAMzZDYABAAJAAAAFzFkNiwgMWQ2LCAyZDYs\nIDNkNiwgNGQ2AAQACQAAAAM0ZDgABAAJAAAAAzNkOAAEAAkAAAADMmQ4AAQACQAAAAQzZDEw\nAAQACQAAACoxZDgsIDFkMTIsIDJkOCwgMmQxMiwgM2Q4LCAzZDEyLCA0ZDgsIDRkMTIABAAJ\nAAAACDJkOCwgMWQ2AAQACQAAAAMxZDYABAAJAAAACDJkOCwgNGQ4AAQACQAAABwxZDEwLCAx\nZDEwLCAyZDEwLCAzZDEwLCA0ZDEwAAQACQAAAAQxNGQ2AAQACQAAAAMyZDgABAAJAAAABDRk\nMTAABAAJAAAAFzFkNiwgMWQ2LCAyZDYsIDNkNiwgNGQ2AAQACQAAAAg0ZDYsIDNkOAAEAAkA\nAAADMWQ4AAQACQAAAAQ0ZDEwAAQACQAAAA0yZDgsIDRkOCwgNGQ4AAQACQAAAAMyZDQABAAJ\nAAAABDRkMTIABAAJAAAAAzdkNgAEAAkAAAARNWQxMCwgNWQxMCwgMTBkMTAABAAJAAAACjVk\nMTIsIDVkMTIABAAJAAAABDZkMTAABAAJAAAAAzhkNgAEAAkAAAAEMmQxMgAEAAkAAAANNGQ4\nLCA0ZDgsIDRkOAAEAAkAAAADOGQ4AAQACQAAABE0ZDEyLCA4ZDEyLCAxMmQxMgAEAAkAAAAI\nMWQ2LCAxZDQABAAJAAAAAzFkOAAEAAkAAAADMmQ0AAQACQAAAAMzZDYABAAJAAAAAzFkNgAE\nAAkAAAADNmQ4AAQACQAAAAM3ZDYABAAJAAAAAzNkOAAEAAkAAAADMWQ4AAQACQAAAAMyZDYA\nBAAJAAAAAzFkNAAEAAkAAAAEOGQxMAAEAAkAAAAIOGQ4LCA4ZDgABAAJAAAABDVkMTAABAAJ\nAAAAAzJkOAAEAAkAAAADNmQ2AAQACQAAAAQ1ZDEwAAQACQAAAAgyZDgsIDFkOAAEAAkAAAAD\nNGQ0AAQACQAAAAQyZDEwAAAAEAAAAMIABAAJAAAAEjFkNiwgMmQ2LCAzZDYsIDRkNgAEAAkA\nAAADMWQ2AAQACQAAAAMxZDYABAAJAAAAEjFkOCwgMmQ4LCAzZDgsIDRkOAAEAAkAAAADMWQ4\nAAQACQAAAAMxZDYABAAJAAAAAAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAFjFkMTAsIDJk\nMTAsIDNkMTAsIDRkMTAABAAJAAAAAzFkNgAEAAkAAAAKMWQxMCwgNmQxMAAEAAkAAAAEMWQx\nMAAEAAkAAAAAAAQACQAAAAAABAAJAAAABDFkMTAABAAJAAAAAAAEAAkAAAAWMWQxMiwgMmQx\nMiwgM2QxMiwgNGQxMgAEAAkAAAASMWQ4LCAyZDgsIDNkOCwgNGQ4AAQACQAAAAAABAAJAAAA\nAzFkOAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAAAAEAAkAAAADMmQ4AAQACQAAABIxZDYs\nIDJkNiwgM2Q2LCA0ZDYABAAJAAAAAAAEAAkAAAADMWQ4AAQACQAAABIxZDQsIDJkNCwgM2Q0\nLCA0ZDQABAAJAAAABDFkMTIABAAJAAAAAAAEAAkAAAADMWQ4AAQACQAAAAAABAAJAAAAAzFk\nOAAEAAkAAAAAAAQACQAAAAQxZDEwAAQACQAAAAMyZDQABAAJAAAAAAAEAAkAAAAAAAQACQAA\nAAgyZDQsIDNkNAAEAAkAAAADMWQ2AAQACQAAAAAABAAJAAAAAzFkOAAEAAkAAAAAAAQACQAA\nAAAABAAJAAAAAzFkOAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAAAAEAAkAAAAAAAQACQAA\nAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJ\nAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAzFkNgAEAAkAAAAAAAQACQAAAAAABAAJAAAA\nAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkA\nAAADMmQ2AAQACQAAAAMxZDgABAAJAAAAAzFkOAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAE\nAAkAAAADM2Q2AAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkA\nAAADMWQ2AAQACQAAAAMxZDYABAAJAAAAAzFkNgAEAAkAAAAAAAQACQAAAAgyZDgsIDJkNgAE\nAAkAAAAAAAQACQAAAAMxZDgABAAJAAAAAAAEAAkAAAADMWQ4AAQACQAAAAAABAAJAAAAAzFk\nOAAEAAkAAAAEMWQxMAAEAAkAAAADMWQ2AAQACQAAAAMxZDQABAAJAAAABDFkMTAABAAJAAAA\nAAAEAAkAAAADMWQ2AAQACQAAAAAABAAJAAAABDFkMTAABAAJAAAAAAAEAAkAAAADMWQ4AAQA\nCQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAAzFkOAAEAAkAAAAIMmQ2\nLCAxZDYABAAJAAAAAzFkOAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAzFkNgAEAAkAAAAAAAQA\nCQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAAzFkNgAEAAkAAAADMWQ4\nAAQACQAAAAMxZDgABAAJAAAAAAAEAAkAAAADMWQ4AAQACQAAAAAABAAJAAAABDFkMTIABAAJ\nAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAzFk\nNgAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkA\nAAADMWQ2AAQACQAAAAMyZDQABAAJAAAAAAAEAAkAAAAAAAQACQAAABIxZDgsIDJkOCwgM2Q4\nLCA0ZDgABAAJAAAAEjFkNiwgMmQ2LCAzZDYsIDRkNgAEAAkAAAADMWQ2AAQACQAAAAAABAAJ\nAAAAAzFkOAAEAAkAAAADMWQ4AAQACQAAAA0zZDgsIDRkOCwgNWQ4AAQACQAAAAQxZDEwAAQA\nCQAAAAAABAAJAAAAAzFkNgAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAA\nAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAMxZDgA\nBAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAAAAAEAAkAAAAAAAQACQAAAAAABAAJAAAA\nAAAEAAkAAAAAAAQACQAAAAMxZDgABAAJAAAAAAAEAAkAAAAAAAQACQAAABIxZDYsIDJkNiwg\nM2Q2LCA0ZDYABAAJAAAAAzFkOAAEAAkAAAADMmQ0AAQACQAAAAAABAAJAAAAAzFkNgAEAAkA\nAAAAAAQACQAAAAMxZDYABAAJAAAAAzFkOAAEAAkAAAAAAAQACQAAAAMxZDYABAAJAAAAEjFk\nNCwgMmQ0LCAzZDQsIDRkNAAEAAkAAAAAAAQACQAAAAMxZDgABAAJAAAABDFkMTAABAAJAAAA\nAzFkOAAEAAkAAAADMWQ2AAQACQAAAAAABAAJAAAAAAAEAAkAAAADMWQ0AAQACQAAAAQxZDEw\nAAAADQAAAMIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAQAAAAQAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAA\nAAAAAAAAAAEAAAAEAAAABAAAAAAAAAACAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA\nAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA\nAAAAAQAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAQAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAA\nAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAQAAAAcAAAAGAAAAAAAAAAAAAAAAAAAABAAA\nAAAAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAAAAAABAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAB\nAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAA\nAAIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\nAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAABAIAAAABAAQACQAAAAVuYW1lcwAAABAA\nAAAGAAQACQAAAApzcGVsbF9uYW1lAAQACQAAAAhwY19jbGFzcwAEAAkAAAALc3BlbGxfbGV2\nZWwABAAJAAAABmRhbWFnZQAEAAkAAAAGdXBjYXN0AAQACQAAAA1kYW1hZ2VfbGVuZ3RoAAAE\nAgAAAAEABAAJAAAACXJvdy5uYW1lcwAAAA0AAAACgAAAAP///z4AAAQCAAAAAQAEAAkAAAAF\nY2xhc3MAAAAQAAAAAwAEAAkAAAAGdGJsX2RmAAQACQAAAAN0YmwABAAJAAAACmRhdGEuZnJh\nbWUAAAD+","type":"binary"},{"name":"weapons_2014.rds","content":"WAoAAAACAAQEAgACAwAAAAMTAAAAAwAAABAAAAAlAAQACQAAAARDbHViAAQACQAAAAZEYWdn\nZXIABAAJAAAACUdyZWF0Y2x1YgAEAAkAAAAHSGFuZGF4ZQAEAAkAAAAHSmF2ZWxpbgAEAAkA\nAAAMTGlnaHQgaGFtbWVyAAQACQAAAARNYWNlAAQACQAAAAxRdWFydGVyc3RhZmYABAAJAAAA\nBlNpY2tsZQAEAAkAAAAFU3BlYXIABAAJAAAAD0Nyb3NzYm93LCBsaWdodAAEAAkAAAAERGFy\ndAAEAAkAAAAIU2hvcnRib3cABAAJAAAABVNsaW5nAAQACQAAAAlCYXR0bGVheGUABAAJAAAA\nBUZsYWlsAAQACQAAAAZHbGFpdmUABAAJAAAACEdyZWF0YXhlAAQACQAAAApHcmVhdHN3b3Jk\nAAQACQAAAAdIYWxiZXJkAAQACQAAAAVMYW5jZQAEAAkAAAAJTG9uZ3N3b3JkAAQACQAAAARN\nYXVsAAQACQAAAAtNb3JuaW5nc3RhcgAEAAkAAAAEUGlrZQAEAAkAAAAGUmFwaWVyAAQACQAA\nAAhTY2ltaXRhcgAEAAkAAAAKU2hvcnRzd29yZAAEAAkAAAAHVHJpZGVudAAEAAkAAAAIV2Fy\nIHBpY2sABAAJAAAACVdhcmhhbW1lcgAEAAkAAAAEV2hpcAAEAAkAAAAHQmxvd2d1bgAEAAkA\nAAAOQ3Jvc3Nib3csIGhhbmQABAAJAAAAD0Nyb3NzYm93LCBoZWF2eQAEAAkAAAAHTG9uZ2Jv\ndwAEAAkAAAAUU3BlbGwgU2Nyb2xsIExldmVsIDAAAAAQAAAAJQAEAAkAAAAMMWQ0IEJsdWRn\nZW9uAAQACQAAAAwxZDQgUGllcmNpbmcABAAJAAAADDFkOCBCbHVkZ2VvbgAEAAkAAAAMMWQ2\nIFNsYXNoaW5nAAQACQAAAAwxZDYgUGllcmNpbmcABAAJAAAADDFkNCBCbHVkZ2VvbgAEAAkA\nAAAMMWQ2IEJsdWRnZW9uAAQACQAAAAwxZDYgQmx1ZGdlb24ABAAJAAAADDFkNCBTbGFzaGlu\nZwAEAAkAAAAMMWQ0IFBpZXJjaW5nAAQACQAAAAwxZDYgUGllcmNpbmcABAAJAAAADDFkNCBQ\naWVyY2luZwAEAAkAAAAMMWQ2IFBpZXJjaW5nAAQACQAAAAwxZDQgQmx1ZGdlb24ABAAJAAAA\nDDFkOCBTbGFzaGluZwAEAAkAAAAMMWQ4IEJsdWRnZW9uAAQACQAAAA0xZDEwIFNsYXNoaW5n\nAAQACQAAAA0xZDEyIFNsYXNoaW5nAAQACQAAAAwyZDYgU2xhc2hpbmcABAAJAAAADTFkMTAg\nU2xhc2hpbmcABAAJAAAADTFkMTIgUGllcmNpbmcABAAJAAAADDFkOCBTbGFzaGluZwAEAAkA\nAAAMMmQ2IEJsdWRnZW9uAAQACQAAAAwxZDggUGllcmNpbmcABAAJAAAADTFkMTAgUGllcmNp\nbmcABAAJAAAADDFkOCBQaWVyY2luZwAEAAkAAAAMMWQ2IFNsYXNoaW5nAAQACQAAAAwxZDYg\nU2xhc2hpbmcABAAJAAAADDFkNiBQaWVyY2luZwAEAAkAAAAMMWQ4IFBpZXJjaW5nAAQACQAA\nAAwxZDggQmx1ZGdlb24ABAAJAAAADDFkNCBTbGFzaGluZwAEAAkAAAAKMSBQaWVyY2luZwAE\nAAkAAAAMMWQ2IFBpZXJjaW5nAAQACQAAAA0xZDEwIFBpZXJjaW5nAAQACQAAAAwxZDggUGll\ncmNpbmcABAAJAAAAAS0AAAAQAAAAJQAEAAkAAAAFTGlnaHQABAAJAAAAHkZpbmVzc2UsIExp\nZ2h0LCBUaHJvd24gKDIwLzYwKQAEAAkAAAAKVHdvLWhhbmRlZAAEAAkAAAAVTGlnaHQsIFRo\ncm93biAoMjAvNjApAAQACQAAAA9UaHJvd24gKDMwLzEyMCkABAAJAAAAFUxpZ2h0LCBUaHJv\nd24gKDIwLzYwKQAEAAkAAAABLQAEAAkAAAAPVmVyc2F0aWxlICgxZDgpAAQACQAAAAVMaWdo\ndAAEAAkAAAAfVGhyb3duICgyMC82MCksIFZlcnNhdGlsZSAoMWQ4KQAEAAkAAAAoQW1tdW5p\ndGlvbiAoODAvMzIwKSwgTG9hZGluZywgVHdvLWhhbmRlZAAEAAkAAAAXRmluZXNzZSwgVGhy\nb3duICgyMC82MCkABAAJAAAAH0FtbXVuaXRpb24gKDgwLzMyMCksIFR3by1oYW5kZWQABAAJ\nAAAAE0FtbXVuaXRpb24gKDMwLzEyMCkABAAJAAAAEFZlcnNhdGlsZSAoMWQxMCkABAAJAAAA\nAS0ABAAJAAAAGEhlYXZ5LCBSZWFjaCwgVHdvLWhhbmRlZAAEAAkAAAARSGVhdnksIFR3by1o\nYW5kZWQABAAJAAAAEUhlYXZ5LCBUd28taGFuZGVkAAQACQAAABhIZWF2eSwgUmVhY2gsIFR3\nby1oYW5kZWQABAAJAAAADlJlYWNoLCBTcGVjaWFsAAQACQAAABBWZXJzYXRpbGUgKDFkMTAp\nAAQACQAAABFIZWF2eSwgVHdvLWhhbmRlZAAEAAkAAAABLQAEAAkAAAAYSGVhdnksIFJlYWNo\nLCBUd28taGFuZGVkAAQACQAAAAdGaW5lc3NlAAQACQAAAA5GaW5lc3NlLCBMaWdodAAEAAkA\nAAAORmluZXNzZSwgTGlnaHQABAAJAAAAH1Rocm93biAoMjAvNjApLCBWZXJzYXRpbGUgKDFk\nOCkABAAJAAAAAS0ABAAJAAAAEFZlcnNhdGlsZSAoMWQxMCkABAAJAAAADkZpbmVzc2UsIFJl\nYWNoAAQACQAAABxBbW11bml0aW9uICgyNS8xMDApLCBMb2FkaW5nAAQACQAAACNBbW11bml0\naW9uICgzMC8xMjApLCBMb2FkaW5nLCBMaWdodAAEAAkAAAAwQW1tdW5pdGlvbiAoMTAwLzQw\nMCksIExvYWRpbmcsIFR3by1oYW5kZWQsIEhlYXZ5AAQACQAAACdBbW11bml0aW9uICgxNTAv\nNjAwKSwgSGVhdnksIFR3by1oYW5kZWQABAAJAAAABkNvbW1vbgAABAIAAAABAAQACQAAAAVu\nYW1lcwAAABAAAAADAAQACQAAAARuYW1lAAQACQAAAAZkYW1hZ2UABAAJAAAACnByb3BlcnRp\nZXMAAAQCAAAAAQAEAAkAAAAJcm93Lm5hbWVzAAAADQAAAAKAAAAA////2wAABAIAAAABAAQA\nCQAAAAVjbGFzcwAAABAAAAADAAQACQAAAAZ0YmxfZGYABAAJAAAAA3RibAAEAAkAAAAKZGF0\nYS5mcmFtZQAAAP4=","type":"binary"}]
